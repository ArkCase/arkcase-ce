- name: System details
  debug: msg="{{ item }}"
  with_items: 
    - "{{ ansible_distribution }}"
    - "{{ ansible_distribution_version }}"
    - "{{ ansible_distribution_major_version }}"

- name: set package names if we are on RHEL 8
  set_fact:
    pkg_policycoreutils: "policycoreutils-python-utils"
    pkg_python_setuptools: "python3-setuptools"
    pkg_python_cryptography: "python3-cryptography"
  when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"

- name: set package names if we are on CentOS 7
  set_fact:
    pkg_policycoreutils: "policycoreutils-python"
    pkg_python_setuptools: "python-setuptools"
    pkg_python_cryptography: "python-cryptography"
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: list OS dependent package names
  debug:
    msg: "policycoreutils: {{ pkg_policycoreutils }}"

- name: install epel (needed first)
  become: yes
  yum:
    state: installed
    name: 
      - epel-release        
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

# At least on CentOS 7, we need to remove python3-pip, to get a clean 
# install of python3-pip in the next task, which will actually create 
# /usr/bin/pip3.
- name: remove pip2 that might come up along OS        
  become: yes
  yum:
    state: absent
    name:
      - python-pip
      - python3-pip

- name: install required packages
  become: yes
  yum:
    state: installed
    name:
      - java-11-openjdk
      - java-11-openjdk-devel
      - java-1.8.0-openjdk
      - java-1.8.0-openjdk-devel
      - "{{ pkg_policycoreutils }}"
      - zip
      - unzip
      - git
      - net-tools
      - "@Development Tools"
      - bzip2
      - tar
      - wget
      - sshpass
      - python3
      - python3-pip
      - "{{ pkg_python_setuptools }}"
      - "{{ pkg_python_cryptography }}"

- name: update pip
  become: yes
  pip:
    executable: pip3
    name: pip
    extra_args: --upgrade
        
- name: install firewalld
  become: yes
  yum:
    state: installed
    name: firewalld
  when: enable_firewall is undefined or enable_firewall

- name: remove python2-passlib since it breaks solr password setting
  become: yes
  yum:
    state: absent
    name:
      - python2-passlib

- name: folder structure for app, data and logs
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    mode: "u+rwx,g+rx,o+rx"
  loop:
    - "{{ root_folder }}"
    - "{{ root_folder }}/app"
    - "{{ root_folder }}/data"
    - "{{ root_folder }}/log"
    - "{{ root_folder }}/install"
    - "{{ root_folder }}/common"
    - "{{ root_folder }}/tmp"

- name: Check whether I am inside a Docker container
  stat:
    path: /.dockerenv
  register: stat_dockerenv_result

- name: set hostname
  become: yes
  hostname:
    name: "{{ internal_host }}"
  # Don't try to set the hostname when running inside Docker, this is
  # not possible. Instead, use `--hostname` on the `docker run`
  # command line.
  when: not stat_dockerenv_result.stat.exists
    
- name: add {{ internal_host }} to hosts file
  become: yes
  lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
  loop:
    - "{{ arkcase_host_address | default('127.0.0.1') }} arkcase-host"
    - "127.0.0.1 {{ internal_host }}"
    - "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }} {{ internal_host }}"
  # Don't try to modify the `/etc/hosts` file when running inside
  # Docker, this is not possible. Instead, use `--add-host` on the
  # `docker run` command line.
  when: not stat_dockerenv_result.stat.exists and not (aws_client | default(false))

- name: set timezone to UTC
  become: yes
  timezone:
    name: "{{ time_zone | default('UTC') }}"

- name: Set default locale to en_US.utf8
  become: yes
  command: localectl set-locale LANG=en_US.utf8

- name: Ensure cron doesn't send mails (the sendmail processes hang forever)
  become: yes
  ansible.builtin.replace:
    backup: yes
    path: /etc/sysconfig/crond
    regexp: "^CRONDARGS=$"
    replace: "CRONDARGS= -s -m off"
  register: disable_cron_email

- name: restart crond if needed
  become: yes
  ansible.builtin.systemd:
    name: crond
    state: restarted
  when: disable_cron_email is changed

- name: Run CRON job every day at 1.05 to remove files older than 7 days
  become: yes
  become_method: sudo
  cron:
    name: "remove_files"
    user: "root"
    hour: "1"
    minute: "5"
    job: 'find {{ root_folder }}/data/arkcase-home/fileserver -mtime +6 -type f -exec rm {} \;'
    state: present

- name: Get the RDS common certifcate
  become: yes
  uri:
    creates: "{{ root_folder }}/common/rds-ca-2019-root.pem"
    dest: "{{ root_folder }}/common/rds-ca-2019-root.pem"
    url: https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem

- name: Get a secure Log4J version
  become: yes
  uri:
    url: https://archive.apache.org/dist/logging/log4j/{{ log4j_version | default("2.19.0") }}/apache-log4j-{{ log4j_version | default("2.19.0") }}-bin.tar.gz
    dest: "{{ root_folder }}/common/apache-log4j-{{ log4j_version | default('2.19.0') }}-bin.tar.gz"
    creates: "{{ root_folder }}/common/apache-log4j-{{ log4j_version | default('2.19.0') }}-bin.tar.gz"

- name: unarchive Log4J jar files
  become: yes
  unarchive:
    src: "{{ root_folder }}/common/apache-log4j-{{ log4j_version | default('2.19.0') }}-bin.tar.gz"
    remote_src: yes
    dest: "{{ root_folder }}/common"
    extra_opts:
      - --strip-components=1
    include:
      - apache-log4j-2.19.0-bin/log4j-api-{{ log4j_version | default('2.19.0') }}.jar
      - apache-log4j-2.19.0-bin/log4j-core-{{ log4j_version | default('2.19.0') }}.jar
      - apache-log4j-2.19.0-bin/log4j-1.2-api-{{ log4j_version | default('2.19.0') }}.jar
    creates: "{{ root_folder }}/common/log4j-api-{{ log4j_version | default('2.19.0') }}.jar"
   
- name: fapolicy settings for common, if fapolicyd is installed
  include_tasks: "{{ role_path }}/../fapolicyd/tasks/main.yml"
  loop:
    - name: arkcase_common
      folder_path: "{{ root_folder }}/common"

- name: change default logrotate.conf settings - rotate daily, keep 4
  become: yes
  replace:
    backup: yes
    path: /etc/logrotate.conf
    regexp: "{{ item.regexp }}"
    replace: "{{ item.replace }}"
  loop:
    - regexp: "weekly"
      replace: "daily"
    - regexp: "4"
      replace: "7"

- name: Import server certificates to JDK truststore 
  block:
    - name: see if the Java truststore exists
      become: yes
      stat:
        path: "{{ java_trust_store }}"
      register: arkcase_ts_stat
      changed_when: false
    - name: write Java key store and trust store
      block:
        - name: add JDK 11 certs to Java trust store
          become: yes
          command: keytool -importkeystore -srckeystore /usr/lib/jvm/java-11-openjdk/lib/security/cacerts -srcstorepass changeit -destkeystore "{{ java_trust_store }}" -deststorepass {{ java_trust_store_pass }} -noprompt
        - name: add JDK 8 certs to Java trust store
          become: yes
          command: keytool -importkeystore -srckeystore /usr/lib/jvm/java-1.8.0-openjdk/jre/lib/security/cacerts -srcstorepass changeit -destkeystore "{{ java_trust_store }}" -deststorepass {{ java_trust_store_pass }} -noprompt
        - name: add Arkcase server certs to Java 11 trust store
          become: yes
          command: keytool -importkeystore -srckeystore "{{ java_trust_store }}" -srcstorepass {{ java_trust_store_pass }} -destkeystore /usr/lib/jvm/java-11-openjdk/lib/security/cacerts -deststorepass changeit -noprompt
        - name: add Arkcase server certs to Java 8 trust store
          become: yes
          command: keytool -importkeystore -srckeystore "{{ java_trust_store }}" -srcstorepass {{ java_trust_store_pass }} -destkeystore /usr/lib/jvm/java-1.8.0-openjdk/jre/lib/security/cacerts -deststorepass changeit -noprompt
      when: arkcase_ts_stat.stat.exists == True and not ansible_fips

- name: folder structure for app, data and logs
  become: yes
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ root_folder }}"
    - "{{ root_folder }}/app"
    - "{{ root_folder }}/data"
    - "{{ root_folder }}/log"
    - "{{ root_folder }}/install"
    - "{{ root_folder }}/common"
    - "{{ root_folder }}/tmp"

- name: install epel (needed first)
  become: yes
  yum:
    state: installed
    name:
      - epel-release

- name: install required packages
  become: yes
  yum:
    state: installed
    name:
      - python-pip

- name: install Python crypto library
  become: yes
  pip:
    name: cryptography
    extra_args: --upgrade

- name: ensure secure permissions on private keys
  become: yes
  file: 
    path: "{{ ssl_key }}"
    mode: 0600

- name: generate the chain cert file
  become: yes
  shell: cat {{ ssl_intermediate_cert }} {{ ssl_root_cert }} > {{ ssl_chain_cert }}

- name: Java keystore and trust store
  block:
    - name: see if the Java keystore exists
      become: yes
      stat:
        path: "{{ java_key_store }}"
      register: arkcase_ks_stat
      changed_when: false
    - name: see if keys already added to the Java keystore
      become: yes
      command: keytool -v -list -keystore "{{ java_key_store }}" -storepass "{{ java_key_store_pass }}"
      when: arkcase_ks_stat.stat.exists
      register: key_out
      changed_when: false
    - name: write Java key store and trust store
      block:
        - name: write arkcase.p12 (used by Pentaho)
          become: yes
          command: openssl pkcs12 -export -in {{ ssl_cert }} -inkey {{ ssl_key }} -out "{{ java_p12_store }}" -name {{ ansible_facts.fqdn }} -chain -CAfile {{ ssl_chain_cert }} -passout 'pass:{{ java_key_store_pass }}'
        - name: copy arkcase.p12 to key store format (PKCS12 format)
          become: yes
          command: keytool -importkeystore -deststorepass '{{ java_key_store_pass }}' -destkeypass '{{ java_key_store_pass }}' -destkeystore "{{ java_key_store }}" -deststoretype pkcs12 -srckeystore "{{ java_p12_store }}" -srcstoretype pkcs12 -srcstorepass {{ java_key_store_pass }} -alias {{ ansible_facts.fqdn }} -noprompt
        - name: copy arkcase.p12 to key store format (JKS format)
          become: yes
          command: keytool -importkeystore -deststorepass '{{ java_key_store_pass }}' -destkeypass '{{ java_key_store_pass }}' -destkeystore "{{ java_key_store_jks }}" -deststoretype JKS -srckeystore "{{ java_p12_store }}" -srcstoretype pkcs12 -srcstorepass '{{ java_key_store_pass }}' -alias {{ ansible_facts.fqdn }} -noprompt
        - name: add ArkCase certs to Java truststore
          become: yes
          java_cert:
            cert_alias: "{{ item.alias }}"
            cert_path: "{{ item.path }}"
            keystore_path: "{{ java_trust_store }}"
            keystore_pass: "{{ java_trust_store_pass }}"
            keystore_create: yes
            state: present
          loop:
            - alias: "{{ ansible_facts.fqdn }}"
              path: "{{ ssl_cert }}"
            - alias: "arkcase-chain"
              path: "{{ ssl_ca }}"
        - name: add JDK certs to Java trust store
          become: yes
          command: keytool -importkeystore -srckeystore /usr/lib/jvm/java-11-openjdk/lib/security/cacerts -srcstorepass changeit -destkeystore "{{ java_trust_store }}" -deststorepass {{ java_trust_store_pass }} -noprompt
      when: "arkcase_ks_stat.stat.exists == False"

# zookeeper requires certain extensions to tell what kind of keystore and trust store it is
- name: special keystore extension
  become: yes
  file:
    src: "{{ root_folder }}/common/arkcase.ks"
    dest: "{{ root_folder }}/common/arkcase-key-store.p12"
    state: link

- name: special truststore extension
  become: yes
  file:
    src: "{{ root_folder }}/common/arkcase.ts"
    dest: "{{ root_folder }}/common/arkcase-trust-store.p12"
    state: link

- name: copy server cert to shared folder
  become: yes
  copy: 
    remote_src: yes
    src: "/etc/pki/tls/certs/{{ ansible_facts.hostname }}.pem"
    dest: /data/shared/certificates/{{ ansible_facts.hostname }}.pem

- name: find server certs copied so far
  find:
    paths: /data/shared/certificates
  register: existing_certs

- name: import certs into Java trust store, as needed
  become: yes
  java_cert:
    cert_alias: "{{ item.path | basename }}"
    cert_path: "{{ item.path }}"
    keystore_pass: "{{ java_trust_store_pass }}"
    keystore_path: "{{ root_folder }}/common/arkcase.ts"
    keystore_type: JKS
    state: present
  loop: "{{ existing_certs.files }}"





- name: Set haproxy facts for RHEL 8
  ansible.builtin.set_fact:
    pkg_haproxy: haproxy
    path_haproxy_cfg: "/etc/haproxy/haproxy.cfg"
    path_stats_socket: "/var/lib/haproxy/stats"
  when: ansible_distribution in ["RedHat","Rocky"] and ansible_distribution_major_version == "8"

- name: Set haproxy facts CentOS 7
  ansible.builtin.set_fact:
    pkg_haproxy: "rh-haproxy18-haproxy"
    path_haproxy_cfg: "/etc/opt/rh/rh-haproxy18/haproxy/haproxy.cfg"
    path_stats_socket: "/var/opt/rh/rh-haproxy18/lib/haproxy/stats"
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: See if firewalld is running
  become: true
  ansible.builtin.command: firewall-cmd --state
  register: firewalld_state
  failed_when: false
  changed_when: false

# using Python 3.9, or Python 2, no firewall module can be found or installed, 
# so we have to use commands instead
- name: Ensure web and proxy ports
  become: true
  command: firewall-cmd --add-port "{{ item }}" --permanent
  loop:
    - "80/tcp"
    - "443/tcp"
    - "8404/tcp"
  register: firewall_ports_updated

- name: reload the firewall if needed
  become: yes
  command: firewall-cmd --reload
  when: firewall_ports_updated is changed and firewalld_state.stdout == 'runnng'

- name: Install epel-release
  become: true
  ansible.builtin.yum:
    name: epel-release
    state: present
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: Install software collections
  become: true
  ansible.builtin.yum:
    name: centos-release-scl
    state: present
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: Install haproxy 1.8
  become: true
  ansible.builtin.yum:
    name: "{{ pkg_haproxy }}"
    state: present

- name: Haproxy folders
  become: true
  ansible.builtin.file:
    path: "{{ root_folder }}/log/haproxy"
    state: directory
    owner: haproxy
    group: haproxy
    mode: '0755'

- name: See if rsyslog.conf exists
  become: true
  ansible.builtin.stat:
    path: /etc/rsyslog.conf
  register: rsyslog_stat
  changed_when: false
  failed_when: false

- name: Change rsyslog.conf for allow haproxy logging
  become: true
  ansible.builtin.lineinfile:
    path: /etc/rsyslog.conf
    backup: true
    regex: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: '^\#\$ModLoad\ imudp'
      line: '$ModLoad imudp'
    - regexp: '^\#\$UDPServerRun\ 514'
      line: '$UDPServerRun 514'
  register: rsyslog_configuration
  when: rsyslog_stat.stat.exists

# Python 3.9 has no selinux module
- name: see if SELinux context needs to be added
  become: yes
  command: ls -ldZ {{ root_folder}}/log/haproxy
  register: haproxy_logging_context
  changed_when: false

- name: Allow SELinux write access on the haproxy log directory
  become: true
  ansible.builtin.command: semanage fcontext -a -t haproxy_var_log_t '{{ root_folder }}/log/haproxy'
  register: allow_haproxy_logging
  vars:

- name: Apply new SELinux file context to filesystem
  become: true
  ansible.builtin.command: restorecon -R -v {{ root_folder }}/log/haproxy
  when: allow_haproxy_logging is changed
  changed_when: allow_haproxy_logging is changed

- name: Copy haproxy log configuration into rsyslog.d
  become: true
  ansible.builtin.template:
    src: haproxy-rsyslog.d
    dest: /etc/rsyslog.d/haproxy.conf
    backup: true
  register: haproxy_rsyslog
  when: rsyslog_stat.stat.exists

- name: Remove default TLS policies
  become: true
  ansible.builtin.lineinfile:
    path: "{{ path_haproxy_cfg }}"
    backup: true
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: '^    ssl-default-bind-ciphers PROFILE=SYSTEM'
      line: '   # ssl-default-bind-ciphers PROFILE=SYSTEM'
    - regexp: '^    ssl-default-server-ciphers PROFILE=SYSTEM'
      line: '   # ssl-default-server-ciphers PROFILE=SYSTEM'
  register: default_tls_options

- name: Increase 'timeout server' and 'timeout client'
  become: true
  ansible.builtin.lineinfile:
    path: "{{ path_haproxy_cfg }}"
    backup: true
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: 'timeout client          1m'
      line: 'timeout client          3m'
    - regexp: 'timeout server          1m'
      line: 'timeout server          3m'
  register: timeout_settings

- name: Establish our preferred default policies
  become: true
  ansible.builtin.lineinfile:
    path: "{{ path_haproxy_cfg }}"
    backup: true
    line: "{{ item }}"
    insertafter: stats socket {{ path_stats_socket }}
  loop:
    - "    ssl-default-server-options   force-tlsv12"
    - "    ssl-default-bind-ciphers  ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS"
    - "    tune.ssl.default-dh-param 2048"
    - "    # ArkCase Default TLS Options"
    - "    log         127.0.0.1:514 local2"
  register: good_tls_options

- name: Read current config
  become: true
  ansible.builtin.command: cat {{ path_haproxy_cfg }}
  register: current_config
  changed_when: false

- name: Remove default frontend/backend configuration
  become: true
  ansible.builtin.command: sed -i '/^# main frontend which proxys to the backends$/,$d' {{ path_haproxy_cfg }}
  when: '"main frontend which proxys to the backends" in current_config.stdout'
  changed_when: '"main frontend which proxys to the backends" in current_config.stdout'
  register: remove_default_config

- name: Generate cert/key file that haproxy can read (Let's Encrypt-style setup)
  become: true
  ansible.builtin.shell: cat {{ ssl_cert }} {{ ssl_ca }} {{ ssl_key }} > /etc/pki/tls/certs/haproxy.pem

- name: ArkCase configuration
  become: true
  ansible.builtin.blockinfile:
    path: "{{ path_haproxy_cfg }}"
    backup: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK ARKCASE CONFIG"
    block: |
      frontend stats
        bind *:8404
        stats enable
        stats uri /stats
        stats refresh 10s
        stats admin if LOCALHOST
        stats auth admin:{{ default_user_password }}

      frontend main
        mode http
        bind *:80

        bind *:443 force-tlsv12 ssl crt /etc/pki/tls/certs/haproxy.pem
        redirect scheme https code 301 if !{ ssl_fc }

        # for URLs that should not be called from outside,
        # but only by services within our network.
        acl only_arkcase_host src {{ arkcase_host | default(internal_host) }} 127.0.0.1 {{ internal_host_ip | default(ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0])) }}

        acl acl_solr path_beg /solr
        acl acl_pentaho path_beg /pentaho
        acl acl_arkcase path_beg /arkcase
        acl acl_config path_beg /config
        {{ 'acl acl_assets path_beg /assets' if (deploy_arkcase_portal | default(false)) else '' }}
        acl acl_api_gateway path_beg /api
        acl acl_root path -i /

        # redirections
        redirect code 301 location /arkcase if acl_root

        #arkcase.next services

        # ensure internal sites only visible internally
        http-request deny if acl_solr !only_arkcase_host
        http-request deny if acl_config !only_arkcase_host

        # backend uses
        use_backend be_solr if acl_solr
        use_backend be_pentaho if acl_pentaho
        use_backend be_arkcase if acl_arkcase
        {{ 'use_backend be_assets if acl_assets' if (deploy_arkcase_portal | default(false)) else '' }}
        use_backend be_config if acl_config

      #backend servers
      backend be_solr
        http-response add-header X-Solr-Node %s
        mode http
        balance roundrobin
        option tcp-check
        server solr0 {{ solr_node_1 }}:8983 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
        {{ 'server solr1 ' + solr_node_2 + ':8983 check fall 3 rise 2 check ssl verify required ca-file ' + ssl_ca if solr_node_2 != '' else '' }}
        {{ 'server solr2 ' + solr_node_3 + ':8983 check fall 3 rise 2 check ssl verify required ca-file ' + ssl_ca if solr_node_3 != '' else '' }}

      backend be_pentaho
        http-response add-header X-Pentaho-Node %s
        mode http
        option tcp-check
        server pentaho0 {{ pentaho_host }}:2002 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

      backend be_arkcase
        http-response add-header X-ArkCase-Node %s
        mode http
        option tcp-check
        server arkcase0 {{ arkcase_host }}:8843 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

      backend be_sse
        http-response add-header X-SSE-Node %s
        mode http
        option tcp-check
        server sse0 {{ arkcase_host }}:9050
        http-request set-path %[path,regsub(^/api/sse/,/)]

      backend be_minio
        http-response add-header X-Minio-Node %s
        mode http
        option tcp-check
        server minio0 {{ arkcase_host }}:9000
        http-request set-path %[path,regsub(^/api/minio/,/)]

      backend be_api_gateway
        http-response add-header X-API-Gateway-Node %s
        mode http
        option tcp-check
        server api_gateway0 {{ arkcase_host }}:9002

      backend be_oidc
        http-response add-header X-OIDC-Node %s
        mode http
        option tcp-check
        server oidc0 {{ arkcase_host }}:9100
        http-request set-path %[path,regsub(^/api/oidc/,/)]

      backend be_config
        http-response add-header X-Config %s
        mode http
        option tcp-check
        server config {{ arkcase_host }}:9999 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
        http-request set-path %[path,regsub(^/config/,/)]

  register: arkcase_config

- name: microservice frontend
  become: yes
  blockinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK MICROSERVICE FRONT END"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    block: |
              acl acl_sse path_beg /api/sse
              acl acl_oidc path_beg /api/oidc
              acl acl_cognito path_beg /api/cognito
              acl acl_ldap_authority path_beg /api/auth/ldap
              acl acl_portal_prc path_beg /api/arkcase-portal-prc
              acl acl_portal path_beg /api/arkcase-portal/
              acl acl_schema path_beg /api/schema
              acl acl_file_management path_beg /api/file-management
              acl acl_file_utils path_beg /api/file-utils
              acl acl_api_gateway path_beg /api
  when: enable_microservices

- name: minio frontend
  become: yes
  lineinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_minio path_beg /api/minio"
  when: enable_minio

- name: snowbound frontend
  become: yes
  lineinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_snowbound path_beg /VirtualViewerJavaHTML5"
  when: ecm_viewer == "snowbound"

- name: snowbound backend use
  become: yes
  lineinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_snowbound if acl_snowbound"
  when: ecm_viewer == "snowbound"

- name: snowbound back end
  become: yes
  blockinfile:
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK SNOWBOUND BACKEND"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
           backend be_snowbound
             http-response add-header X-Snowbound-Node %s
             mode http
             option tcp-check
             server snowbound0 {{ snowbound_host }}:2005 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
  when: ecm_viewer == "snowbound"

- name: alfresco frontend
  become: yes
  blockinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK ALFRESCO FRONT END USES"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    block: |
            acl acl_alfresco path_beg /alfresco
            acl acl_share path_beg /share
  when: file_repository_type == "alfresco"

- name: Alfresco back end uses
  become: yes
  blockinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK ALFRESCO BACK END USES"
    insertafter: "# backend uses"
    block: |
            use_backend be_alfresco if acl_alfresco
            use_backend be_share if acl_share
  when: file_repository_type == "alfresco"

- name: Alfresco back ends
  blockinfile:
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK ALFRESCO BACK ENDS"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
           backend be_alfresco
             http-response add-header X-Afresco-Node %s
             mode http
             option tcp-check
             server alfresco0 {{ alfresco_host }}:7070 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

           backend be_share
             http-response add-header X-Share-Node %s
             mode http
             option tcp-check
             server share0 {{ alfresco_host }}:7070 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
  when: file_repository_type == "alfresco"


- name: FOIA frontend part
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_foia path_beg /foia"
  when: foia_portal_context is defined

- name: Tell FOIA frontend which backend will use
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_foia if acl_foia"
  when: foia_portal_context is defined

- name: microservice backend uses
  become: yes
  blockinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK MICROSERVICE BACK END USES"
    insertafter: "# backend uses"
    block: |
              use_backend be_sse if acl_sse
              use_backend be_oidc if acl_oidc
              use_backend be_cognito if acl_cognito
              use_backend be_ldap_authority if acl_ldap_authority
              use_backend be_portal_prc if acl_portal_prc
              use_backend be_portal if acl_portal
              use_backend be_schema if acl_schema
              use_backend be_file_management if acl_file_management
              use_backend be_file_utils if acl_file_utils
              use_backend be_api_gateway if acl_api_gateway
  when: enable_microservices

- name: minio backend uses
  become: yes
  lineinfile:
    backup: yes
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_minio if acl_minio"
  when: enable_minio

- name: FOIA context, if needed
  become: true
  ansible.builtin.blockinfile:
    backup: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOIA CONTEXT"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
       backend be_foia
        http-response add-header X-FOIA-Node %s
        mode http
        option tcp-check
        server foia0 {{ internal_host }}:488 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
  when: foia_portal_context is defined

- name: microservice back ends
  blockinfile:
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK MICROSERVICE BACK ENDS"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
            backend be_sse
              http-response add-header X-SSE-Node %s
              mode http
              option tcp-check
              server sse0 {{ arkcase_host }}:9050 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
              http-request set-path %[path,regsub(^/api/sse/,/)]

            backend be_api_gateway
              http-response add-header X-API-Gateway-Node %s
              mode http
              option tcp-check
              server api_gateway0 {{ arkcase_host }}:9002 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

            backend be_oidc
              http-response add-header X-OIDC-Node %s
              mode http
              option tcp-check
              server oidc0 {{ arkcase_host }}:9100 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
              http-request set-path %[path,regsub(^/api/oidc/,/)]

            backend be_cognito
              http-response add-header X-Cognito-Node %s
              mode http
              option tcp-check
              server cognito0 {{ arkcase_host }}:9100 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
              http-request set-path %[path,regsub(^/api/cognito/,/)]

            backend be_ldap_authority
              http-response add-header X-LDAP-Authority-Node %s
              mode http
              option tcp-check
              server ldap-authority0 {{ arkcase_host }}:9090 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
              http-request set-path %[path,regsub(^/api/auth/ldap/,/)]
  when: enable_microservices

- name: minio back end
  blockinfile:
    backup: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK MINIO BACK END"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
            backend be_minio
              http-response add-header X-Minio-Node %s
              mode http
              option tcp-check
              server minio0 {{ arkcase_host }}:9000 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
              http-request set-path %[path,regsub(^/api/minio/,/)]
  when: enable_minio

### Arkcase Portal frontend
- name: ArkCase Portal frontend part
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_arkcase_portal path_beg /{{ arkcase_portal_context | default('portal') }}"
  when: deploy_arkcase_portal | default(false)

- name: Tell ArkCase Portal frontend which backend will use
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_arkcase_portal if acl_arkcase_portal"
  when: deploy_arkcase_portal | default(false)

- name: ArkCase Portal context, if needed
  become: true
  ansible.builtin.blockinfile:
    backup: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK ARKCASE PORTAL CONTEXT"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
       backend be_arkcase_portal
        http-response add-header X-ARKCASE-PORTAL-Node %s
        mode http
        option tcp-check
        server arkcase_portal0 {{ internal_host }}:488 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

       backend be_assets
        http-response add-header x-arkcase-assets-node %s
        mode http
        option tcp-check
        server arkcase_assets0 {{ internal_host }}:488 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
        http-request set-path %[path,regsub(^/assets/,/portal/assets/)]
  when: deploy_arkcase_portal | default(false)

### Showcase frontend
- name: Showcase frontend part
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_showcase path_beg /showcase"
  when: deploy_showcase | default(false)

- name: Tell Showcase frontend which backend will use
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_showcase if acl_showcase"
  when: deploy_showcase | default(false)

- name: Showcase context, if needed
  become: true
  ansible.builtin.blockinfile:
    backup: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK SHOWCASE UI CONTEXT"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
       backend be_showcase
        http-response add-header X-SHOWCASE-Node %s
        mode http
        option tcp-check
        server showcase0 {{ internal_host }}:488 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
  when: deploy_showcase | default(false)

# Showcase backend / mock server
- name: Showcase-backend frontend part
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_showcase_backend path_beg /showcase/api"
  when: deploy_showcase | default(false)

- name: Tell Showcase-backend frontend which backend will use
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_showcase_backend if acl_showcase_backend"
  when: deploy_showcase | default(false)

- name: Showcase-backend context, if needed
  become: true
  ansible.builtin.blockinfile:
    backup: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK SHOWCASE CONTEXT"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
       backend be_showcase_backend
        http-response add-header X-SHOWCASE-BACKEND-Node %s
        mode http
        option tcp-check
        server showcase_backend0 {{ internal_host }}:3000 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
        http-request set-path %[path,regsub(^/showcase/,/)] 
  when: deploy_showcase | default(false)

### Storybook frontend
- name: Storybook frontend part
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "acl acl_arkcase path_beg /arkcase"
    line: "  acl acl_storybook path_beg /storybook"
  when: deploy_storybook | default(false)

- name: Tell Storybook frontend which backend will use
  become: true
  ansible.builtin.lineinfile:
    backup: true
    path: "{{ path_haproxy_cfg }}"
    insertafter: "# backend uses"
    line: "  use_backend be_storybook if acl_storybook"
  when: deploy_storybook | default(false)

- name: Storybook context, if needed
  become: true
  ansible.builtin.blockinfile:
    backup: true
    marker: "# {mark} ANSIBLE MANAGED BLOCK STORYBOOK UI CONTEXT"
    insertafter: "#backend servers"
    path: "{{ path_haproxy_cfg }}"
    block: |
       backend be_storybook
        http-response add-header X-STORYBOOK-Node %s
        mode http
        option tcp-check
        server storybook0 {{ internal_host }}:488 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
  when: deploy_storybook | default(false)

# Confluent platform
- name: Set up proxies to Confluent Platform services
  when: enable_kafka is defined and enable_kafka == "yes"
  block:
    - name: Populate haproxy.conf with frontend part
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK ACL CONFLUENT PLATFORM CONTEXT"
        insertafter: "#arkcase.next services"
        path: "{{ path_haproxy_cfg }}"
        block: |
            acl acl_schema-registry path_beg /schema-registry
            acl acl_control-center path_beg /control-center
            acl acl_control-center-ws path_beg /ws

    - name: Tell frontend part which backend servers will use
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK FRONTEND CONFLUENT PLATFORM CONTEXT"
        insertafter: "# backend uses"
        path: "{{ path_haproxy_cfg }}"
        block: |
            use_backend be_schema-registry if acl_schema-registry
            use_backend be_control-center if acl_control-center
            use_backend be_control-center-ws if acl_control-center-ws

    - name: Populate haproxy.conf with backend servers for Confluent platform
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK BACKEND CONFLUENT PLATFORM CONTEXT"
        insertafter: "#backend servers"
        path: "{{ path_haproxy_cfg }}"
        block: |
          backend be_schema-registry
            http-response add-header X-Schema-registry %s
            mode http
            option tcp-check
            server schema-registry {{ internal_host }}:8081 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            reqrep ^([^\ ]*\ /)schema-registry[/]?(.*)     \1\2

          backend be_control-center
            http-response add-header X-Control-Center %s
            mode http
            option tcp-check
            server control-center {{ internal_host }}:488 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

          backend be_control-center-ws
            mode http
            option tcp-check
            server controlws {{ internal_host }}:9021 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            reqrep (.*\/)control-center\/(.*)     \1\2

- name: Set up proxies to Elasticsearch
  when: enable_elasticsearch is defined and enable_elasticsearch == "yes"
  block:
    - name: Populate haproxy.conf with frontend part
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK ACL ELASTICSEARCH CONTEXT"
        insertafter: "#arkcase.next services"
        path: "{{ path_haproxy_cfg }}"
        block: |
            acl acl_elasticsearch path_beg /elasticsearch

    - name: Tell frontend part which backend servers will use
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK FRONTEND ELASTICSEARCH CONTEXT"
        insertafter: "# backend uses"
        path: "{{ path_haproxy_cfg }}"
        block: |
            use_backend be_elasticsearch if acl_elasticsearch

    - name: Populate haproxy.conf with backend servers for ElasticSearch
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK BACKEND ELASTICSEARCH CONTEXT"
        insertafter: "#backend servers"
        path: "{{ path_haproxy_cfg }}"
        block: |
          backend be_elasticsearch
            http-response add-header X-Elasticsearch %s
            mode http
            option tcp-check
            server elasticsearch {{ internal_host }}:9200 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/elasticsearch/,/)]


- name: Set up proxies to Zipkin
  when: enable_zipkin is defined and enable_zipkin == 'yes'
  block:
    - name: Populate haproxy.conf with frontend part
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK ACL ZIPKIN CONTEXT"
        insertafter: "#arkcase.next services"
        path: "{{ path_haproxy_cfg }}"
        block: |
            acl acl_zipkin-health path_beg /zipkin/health
            acl acl_zipkin-api path_beg /zipkin/api
            acl acl_zipkin path_beg /zipkin

    - name: Tell frontend part which backend servers will use
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK FRONTEND ZIPKIN CONTEXT"
        insertafter: "# backend uses"
        path: "{{ path_haproxy_cfg }}"
        block: |
            use_backend be_zipkin-health if acl_zipkin-health
            use_backend be_zipkin-api if acl_zipkin-api
            use_backend be_zipkin if acl_zipkin

    - name: Populate haproxy.conf with backend servers for Zipkin
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK BACKEND ZIPKIN CONTEXT"
        insertafter: "#backend servers"
        path: "{{ path_haproxy_cfg }}"
        block: |
          backend be_zipkin-health
            http-response add-header X-Zipkin-Health %s
            mode http
            option tcp-check
            server zipkin-health {{ internal_host }}:9411 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/zipkin/,/)]

          backend be_zipkin-api
            http-response add-header X-Zipkin-Api %s
            mode http
            option tcp-check
            server zipkin-api {{ internal_host }}:9411 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/zipkin/,/)]

          backend be_zipkin
            http-response add-header X-Zipkin %s
            mode http
            option tcp-check
            server zipkin {{ internal_host }}:9411/zipkin check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}


- name: Set up proxies to Eureka
  when: enable_eureka is defined and enable_eureka == 'yes'
  block:
    - name: Populate haproxy.conf with frontend part
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK ACL EUREKA CONTEXT"
        insertafter: "#arkcase.next services"
        path: "{{ path_haproxy_cfg }}"
        block: |
            acl acl_gateway path_beg /adk
            acl acl_eureka path_beg /eureka

    - name: Tell frontend part which backend servers will use
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK FRONTEND EUREKA CONTEXT"
        insertafter: "# backend uses"
        path: "{{ path_haproxy_cfg }}"
        block: |
            use_backend be_gateway if acl_gateway
            use_backend be_eureka if acl_eureka
            use_backend be_eureka-dashboard if acl_eureka-dashboard
    - name: Populate haproxy.conf with backend servers for Eureka
      become: true
      ansible.builtin.blockinfile:
        marker: "# {mark} ANSIBLE MANAGED BLOCK BACKEND EUREKA CONTEXT"
        insertafter: "#backend servers"
        path: "{{ path_haproxy_cfg }}"
        block: |
          backend be_gateway
            http-response add-header X-Gateway %s
            mode http
            option tcp-check
            server gateway {{ arkcase_host }}:9002 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/adk/,/)]

          backend be_portal
            http-response add-header X-Portal-Api %s
            mode http
            option tcp-check
            server gateway {{ arkcase_host }}:9040 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/api/arkcase-portal/,/)]

          backend be_portal_prc
            http-response add-header X-Prc-Portal-Api %s
            mode http
            option tcp-check
            server gateway {{ arkcase_host }}:9082 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/api/arkcase-portal-prc/,/)]

          backend be_schema
            http-response add-header X-Schema %s
            mode http
            option tcp-check
            server gateway {{ arkcase_host }}:9099 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/api/schema/,/)]

          backend be_file_management
            http-response add-header X-File-Management %s
            mode http
            option tcp-check
            server file-management0 {{ arkcase_host }}:9068 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/api/file-management/,/)]

          backend be_file_utils
            http-response add-header X-File-Utils %s
            mode http
            option tcp-check
            server file-utils0 {{ arkcase_host }}:9078 check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}
            http-request set-path %[path,regsub(^/api/file-utils/,/)]

          backend be_eureka
            http-response add-header X-Eureka %s
            mode http
            option tcp-check
            server eureka {{ arkcase_host }}:8761/eureka check fall 3 rise 2 check ssl verify required ca-file {{ ssl_ca }}

          backend be_eureka-dashboard
            http-response add-header X-Eureka-Dashboard %s
            mode http
            option tcp-check
            server eureka-dashboard {{ arkcase_host }}:8761/eureka-dashboard

- name: Haproxy logrotate
  become: true
  ansible.builtin.template:
    src: rh-haproxy18-haproxy.logrotate.d
    dest: "/etc/logrotate.d/rh-haproxy18-haproxy"
    force: true
    backup: true

- name: Ensure that haproxy service file exists
  ansible.builtin.stat:
    path: /usr/lib/systemd/system/rh-haproxy18-haproxy.service
  register: haproxy_service

- name: Rename HaProxy service name to haproxy
  become: true
  ansible.builtin.command: mv /usr/lib/systemd/system/rh-haproxy18-haproxy.service /usr/lib/systemd/system/haproxy.service
  register: haproxy_service_name
  when: haproxy_service.stat.exists
  changed_when: haproxy_service.stat.exists

- name: Daemon reload if haproxy service uses another name
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
  when: haproxy_service_name is changed

# python3.9 has no sepolicy module
- name: see if haproxy_connect_any is already enabled
  become: yes
  command: getsebool haproxy_connect_any
  register: haproxy_connect_status

- name: enable haproxy to connect to any port
  become: yes
  command: setsebool -P haproxy_connect_any 1
  when: '"--> on" not in haproxy_connect_status.stdout'

- name: Enable and start haproxy
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    name: haproxy
    enabled: true
    state: started

- name: Restart haproxy if needed
  become: true
  ansible.builtin.systemd:
    name: haproxy
    state: restarted
  when: good_tls_options is changed or default_tls_options is changed or remove_default_config is changed or arkcase_config is changed or timeout_settings is changed

- name: Restart rsyslog service if needed
  become: true
  ansible.builtin.systemd:
    name: rsyslog
    state: restarted
  when: rsyslog_stat.stat.exists and (rsyslog_configuration is changed or haproxy_rsyslog is changed or allow_haproxy_logging is changed)

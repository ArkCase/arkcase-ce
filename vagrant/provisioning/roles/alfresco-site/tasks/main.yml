- name: set alfresco port, if necessary
  set_fact:
    alfresco_port: 7070
  when: alfresco_port is not defined

- name: set alfresco protocol, if necessary
  set_fact:
    alfresco_protocol: "https"
  when: alfresco_protocol is not defined

- name: set alfresco URL
  set_fact:
    alfresco_url: "{{ alfresco_protocol }}://{{ alfresco_host }}:{{ alfresco_port }}"

- name: remove the cookie.txt file if it exists
  file:
    path: cookie.txt
    state: absent
  changed_when: false
    
# note, can't use get_uri here since we need to keep the cookie jar
- name: login to Share
  command: curl -k -sS --user admin:"{{ alfresco_admin_password }}" --cookie cookie.txt --cookie-jar cookie.txt -H "Content-Type:application/x-www-form-urlencoded" --data "success=/share/page/" --data "failure=/share/page/?error=true" --data "username=admin" --data password="{{ alfresco_admin_password }}" -X POST "{{ alfresco_url }}/share/page/dologin"
  args:
    warn: false
  changed_when: false

- name: check if login succeeded
  command: cat cookie.txt
  register: cookie_out
  failed_when: '"alfLogin" not in cookie_out.stdout'
  changed_when: false

- name: get the CSRFToken
  command: curl -k -sS --user admin:"{{ alfresco_admin_password }}" --cookie cookie.txt --cookie-jar cookie.txt "{{ alfresco_url }}/share/service/modules/authenticated?a=user"
  args:
    warn: false
  changed_when: false

- name: check if we got the CSRFToken
  command: cat cookie.txt
  register: csrf_cookie_out
  failed_when: '"Alfresco-CSRFToken" not in csrf_cookie_out.stdout'
  changed_when: false

- name: parse the CSRFToken
  shell: egrep ^{{ alfresco_host }} cookie.txt | grep Alfresco-CSRFToken | awk '{ print $7 }'
  register: csrftoken_parsed
  changed_when: false

- name: decode csrftoken
  set_fact:
    csrftoken: "{{ csrftoken_parsed.stdout|urldecode }}"

- name: create share sites
  include_tasks: create-site.yml
  loop: "{{ alfresco_sites }}"

- name: create content management folders
  include_tasks: create-content-folders.yml
  loop: "{{ site_folders }}"
  loop_control:
    loop_var: site

- name: fetch the RM container
  uri:
    url: "{{ alfresco_url }}/alfresco/s/slingshot/doclib/containers/rm"
    validate_certs: false
    user: admin
    password: "{{ alfresco_admin_password }}"
  register: rm_container_out

# the join filter is just to lift the only array member into a string...
# there will be only 1 node with name documentLibrary, so this JSON filter
# will always return a single-element array.
- name: find the container node ref
  set_fact:
    container_noderef: "{{ rm_container_out.json | json_query(noderef_query) | join(',') }}"
  vars:
    noderef_query: "containers[?name=='documentLibrary'].nodeRef"

- name: create the top-level category
  include_tasks: create-category.yml
  vars:
    c_container_noderef: "{{ container_noderef }}"
    c_name: "{{ records_management_root | default('ACM') }}"

- name: get the RM site containers, so we can find the root noderef
  uri:
    url: "{{ alfresco_url }}/alfresco/s/slingshot/doclib/treenode/site/rm/documentLibrary?perms=false&children=false&max=1000"
    user: admin
    password: "{{ alfresco_admin_password }}"
    validate_certs: no
  register: rm_existing_folders_out

- name: find the root folder noderef
  set_fact:
    acm_category_noderef: "{{ rm_existing_folders_out.json | json_query(rm_noderef_query) | join(',') }}"
  vars:
    rm_noderef_query: "items[?name=='{{ records_management_root | default('ACM') }}'].nodeRef"

- name: create record manager categories
  include_tasks: create-category.yml
  vars:
    c_container_noderef: "{{ acm_category_noderef }}"
    c_name: "{{ item }}"
  loop: "{{ records_management_categories }}"

# TODO: groups per site, not hardcoding acm
- name: add groups to acm site
  uri: 
    url: "{{ alfresco_url }}/alfresco/s/api/sites/acm/memberships"
    method: POST
    user: admin
    password: "{{ alfresco_admin_password }}"
    validate_certs: no
    return_content: yes
    body_format: json
    body:
      group:
        fullName: "GROUP_{{ item.name }}"
      role: "{{ item.alfresco_role }}"
  register: group_add_out
  failed_when: '"authority" not in group_add_out.content'
  loop: "{{ ldap_groups|flatten }}"
  when: alfresco_add_groups_to_sites | default(true)

- name: add groups to records management admin role
  uri: 
    url: "{{ alfresco_url }}/alfresco/s/api/rm/roles/{{ item.alfresco_rma_role}}/authorities/GROUP_{{ item.name | urlencode }}"
    method: POST
    user: admin
    password: "{{ alfresco_admin_password }}"
    validate_certs: no
    return_content: yes
    body_format: json
    body:
  register: rma_admin_add_out
  failed_when: '"{}" not in rma_admin_add_out.content'
  loop: "{{ ldap_groups|flatten }}"
  when: alfresco_add_groups_to_sites | default(true)

- name: add groups to records management site
  uri: 
    url: "{{ alfresco_url }}/alfresco/s/api/sites/rm/memberships"
    method: POST
    user: admin
    password: "{{ alfresco_admin_password }}"
    validate_certs: no
    return_content: yes
    body_format: json
    body:
      group:
        fullName: "GROUP_{{ item.name }}"
      role: "{{ item.alfresco_role }}"
  register: rma_group_add_out
  failed_when: '"authority" not in rma_group_add_out.content'
  loop: "{{ ldap_groups|flatten }}"
  when: alfresco_add_groups_to_sites | default(true)

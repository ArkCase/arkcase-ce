- name: fix Alfresco CSRF filter
  become: yes
  become_user: alfresco
  blockinfile:
    backup: yes
    path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/web-extension/share-config-custom.xml"
    insertbefore: "</alfresco-config>"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK: CSRF -->"
    block: |
      <config evaluator="string-compare" condition="CSRFPolicy" replace="true">

        <!--
          Properties that may be used inside the rest of the CSRFPolicy config to avoid repetition but
          also making it possible to provide different values in different environments.
          I.e. Different "Referer" & "Origin" properties for test & production etc.
          Reference a property using "{propertyName}".
        -->
        <properties>

          <!-- There is normally no need to override this property -->
          <token>Alfresco-CSRFToken</token>

          <!--
              Override and set this property with a regexp that if you have placed Share behind a proxy that
              does not rewrite the Referer header.
          -->
          <referer></referer>

          <!--
              Override and set this property with a regexp that if you have placed Share behind a proxy that
              does not rewrite the Origin header.
          -->
          <origin></origin>
          </properties>

        <!--
          Will be used and exposed to the client side code in Alfresco.contants.CSRF_POLICY.
          Use the Alfresco.util.CSRFPolicy.getHeader() or Alfresco.util.CSRFPolicy.getParameter() with Alfresco.util.CSRFPolicy.getToken()
          to set the token in custom 3rd party code.
        -->
        <client>
          <cookie>{token}</cookie>
          <header>{token}</header>
          <parameter>{token}</parameter>
        </client>

        <!-- The first rule with a matching request will get its action invoked, the remaining rules will be ignored. -->
        <filter>

          <!--
              Certain webscripts shall not be allowed to be accessed directly form the browser.
              Make sure to throw an error if they are used.
          -->
          <rule>
              <request>
                <path>/proxy/alfresco/remoteadm/.*</path>
              </request>
              <action name="throwError">
                  <param name="message">It is not allowed to access this url from your browser</param>
              </action>
          </rule>

          <!--
              Certain Repo webscripts should be allowed to pass without a token since they have no Share knowledge.
              TODO: Refactor the publishing code so that form that is posted to this URL is a Share webscript with the right tokens.
          -->
          <rule>
              <request>
                <method>POST</method>
                <path>/proxy/alfresco/api/publishing/channels/.+</path>
              </request>
              <action name="assertReferer">
                <param name="referer">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="assertOrigin">
                <param name="origin">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
          </rule>
          <!--
              Certain Surf POST requests from the WebScript console must be allowed to pass without a token since
              the Surf WebScript console code can't be dependent on a Share specific filter.
          -->
          <rule>
              <request>
                <method>POST</method>
                <path>/page/caches/dependency/clear|/page/index|/page/surfBugStatus|/page/modules/deploy|/page/modules/module|/page/api/javascript/debugger|/page/console</path>
              </request>
              <action name="assertReferer">
                <param name="referer">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="assertOrigin">
                <param name="origin">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
          </rule>
          <!-- Certain Share POST requests does NOT require a token -->
          <rule>
              <request>
                <method>POST</method>
                <path>/page/dologin(\?.+)?|/page/site/[^/]+/start-workflow|/page/start-workflow|/page/context/[^/]+/start-workflow</path>
              </request>
              <action name="assertReferer">
                <param name="referer">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="assertOrigin">
                <param name="origin">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
          </rule>

          <!-- Assert logout is done from a valid domain, if so clear the token when logging out -->
          <rule>
              <request>
                <method>POST</method>
                <path>/page/dologout(\?.+)?</path>
              </request>
              <action name="assertReferer">
                <param name="referer">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="assertOrigin">
                <param name="origin">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="clearToken">
                <param name="session">{token}</param>
                <param name="cookie">{token}</param>
              </action>
          </rule>

          <!-- Make sure the first token is generated -->
          <rule>
              <request>
                <session>
                    <attribute name="_alf_USER_ID">.+</attribute>
                    <attribute name="{token}"/>
                    <!-- empty attribute element indicates null, meaning the token has not yet been set -->
                </session>
              </request>
              <action name="generateToken">
                <param name="session">{token}</param>
                <param name="cookie">{token}</param>
              </action>
          </rule>

          <!-- Refresh token on new "page" visit when a user is logged in -->
          <rule>
              <request>
                <method>GET</method>
                <path>/page/.*</path>
                <session>
                    <attribute name="_alf_USER_ID">.+</attribute>
                    <attribute name="{token}">.+</attribute>
                </session>
              </request>
              <action name="generateToken">
                <param name="session">{token}</param>
                <param name="cookie">{token}</param>
              </action>
          </rule>

          <!--
              Verify multipart requests from logged in users contain the token as a parameter
              and also correct referer & origin header if available
          -->
          <rule>
              <request>
                <method>POST</method>
                <header name="Content-Type">multipart/.+</header>
                <session>
                    <attribute name="_alf_USER_ID">.+</attribute>
                </session>
              </request>
              <action name="assertToken">
                <param name="session">{token}</param>
                <param name="parameter">{token}</param>
              </action>
              <action name="assertReferer">
                <param name="referer">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="assertOrigin">
                <param name="origin">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
          </rule>

          <!--
              Verify that all remaining state changing requests from logged in users' requests contains a token in the
              header and correct referer & origin headers if available. We "catch" all content types since just setting it to
              "application/json.*" since a webscript that doesn't require a json request body otherwise would be
              successfully executed using i.e."text/plain".
          -->
          <rule>
              <request>
                <method>POST|PUT|DELETE</method>
                <session>
                    <attribute name="_alf_USER_ID">.+</attribute>
                </session>
              </request>
              <action name="assertToken">
                <param name="session">{token}</param>
                <param name="header">{token}</param>
              </action>
              <action name="assertReferer">
                <param name="referer">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
              <action name="assertOrigin">
                <param name="origin">https://{{ external_host }}/.*|https://{{ alfresco_host }}/.*</param>
              </action>
          </rule>
        </filter>
      </config>


- name: Alfresco packages
  become: yes
  yum:
    state: installed
    name:
      - libreoffice
      - ImageMagick
      - ImageMagick-devel
      - python2-jmespath

- name: record Alfresco https port, so as to fix the share-config-custom.xml later
  set_fact:
    alfresco_tls_port: 7070

- include_tasks: "{{ role_path }}/../tomcat/tasks/main.yml"
  args:
    apply:
      vars:
        tc:
          service: alfresco
          user: alfresco
          tomcat_home: "{{ root_folder }}/app/alfresco"
          tls_port: "{{ alfresco_tls_port }}"
          shutdown_port: 7005
          jmx_remote_port: 50506
          jmx_rmi_port: 50507
          http_port: 7080
          redirect_port: 7443
          ajp_port: 7009
          catalina_out: "{{ root_folder }}/log/alfresco/catalina.out"
          catalina_temp: "{{ root_folder }}/tmp/alfresco"
          log_folder: "{{ root_folder }}/log/alfresco"
          java_home: "{{ alfresco_java_home }}"
  register: tomcat_unarchived
  
- name: remove all files under /webapp, if needed
  become: yes
  become_user: alfresco
  shell: rm -rf "{{ root_folder }}/app/alfresco/webapps/*"
  when: tomcat_unarchived is changed

- name: Tomcat shared and modules folders
  become: yes
  become_user: alfresco
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ root_folder }}/app/alfresco/shared"
    - "{{ root_folder }}/app/alfresco/shared/classes"
    - "{{ root_folder }}/app/alfresco/shared/lib"
    - "{{ root_folder }}/app/alfresco/modules"
    - "{{ root_folder }}/app/alfresco/modules/platform"
    - "{{ root_folder }}/app/alfresco/modules/share"

- name: configure Tomcat shared loader
  become: yes
  become_user: alfresco
  replace:
    path: "{{ root_folder }}/app/alfresco/conf/catalina.properties"
    regexp: '^shared.loader=$'
    replace: 'shared.loader=${catalina.base}/shared/classes,${catalina.base}/shared/lib/*.jar'

- name: link JDBC driver
  become: yes
  become_user: alfresco
  file:
    src: "{{ root_folder }}/common/mariadb-java-client-{{ mariadb_jdbc_version }}.jar"
    dest: "{{ root_folder }}/app/alfresco/lib/mariadb-java-client-{{ mariadb_jdbc_version }}.jar"
    state: link

- name: unzip content services
  become: yes
  become_user: alfresco
  unarchive:
    src: "{{ alfresco_zip_path }}"
    remote_src: true
    dest: "{{ root_folder }}/install/alfresco"
    creates: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/README.txt"

- name: copy alfresco war files
  become: yes
  become_user: alfresco
  copy:
    remote_src: yes
    force: no
    src: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/web-server/webapps/{{ item }}"
    dest: "{{ root_folder }}/app/alfresco/webapps/{{ item }}"
  register: war_file_copy
  loop:
    - alfresco.war
    - ROOT.war
    - share.war

- name: see if the distribution has a _vti_bin.war
  become: yes
  become_user: alfresco
  stat:
    path: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/web-server/webapps/_vti_bin.war"
  register: vti_bin_stat

- name: copy _vti_bin war if it exists
  become: yes
  become_user: alfresco
  copy:
    remote_src: yes
    force: no
    src: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/web-server/webapps/_vti_bin.war"
    dest: "{{ root_folder }}/app/alfresco/webapps/_vti_bin.war"
  when: vti_bin_stat.stat.exists

- name: copy alfresco.xml and share.xml conf files
  block:
    - name: ensure conf/Catalina/localhost exists
      become: yes
      become_user: alfresco
      file:
        path: "{{ root_folder }}/app/alfresco/conf/Catalina/localhost"
        state: directory
    - name: see if alfresco.xml already exists
      become: yes
      become_user: alfresco
      stat:
        path: "{{ root_folder }}/app/alfresco/conf/Catalina/localhost/alfresco.xml"
      register: alfresco_xml
    - name: copy alfresco.xml and share.xml if needed
      become: yes
      become_user: alfresco
      copy:
        remote_src: yes
        src: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/web-server/conf/Catalina/localhost/{{item}}"
        dest: "{{ root_folder }}/app/alfresco/conf/Catalina/localhost/{{ item }}"
      loop:
        - alfresco.xml
        - share.xml
      when: alfresco_xml.stat.exists == False
    - name: fix defective paths in alfresco.xml and share.xml
      become: yes
      become_user: alfresco
      replace:
        path: "{{ root_folder }}/app/alfresco/conf/Catalina/localhost/{{ item }}"
        regexp: "\\.\\.\\/"
        replace: ""
      loop:
        - alfresco.xml
        - share.xml
      
- name: copy shared resources
  block:
    - name: see if shared resources already copied
      become: yes
      become_user: alfresco
      stat:
        path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/web-extension/share-config-custom.xml"
      register: share_config_custom_xml
    - name: copy shared resources if needed
      become: yes
      become_user: alfresco
      shell: cp -a {{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/web-server/shared/classes/* {{ root_folder }}/app/alfresco/shared/classes/
      when: share_config_custom_xml.stat.exists == False

- name: fix alfresco location in share-config-custom.xml
  become: yes
  become_user: alfresco
  replace:
    backup: yes
    path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/web-extension/share-config-custom.xml"
    regexp: 'http://localhost:8080'
    replace: 'https://{{ alfresco_host }}:{{ alfresco_tls_port }}'

- include_tasks: csrf_filter.yml

- name: create alfresco database schema
  include_tasks: "{{ role_path }}/../mariadb/tasks/create_schema.yml"
  args:
    apply:
      vars:
        item: alfresco    

- name: copy alfresco-mmt.jar
  become: yes
  become_user: alfresco
  copy:
    remote_src: true
    src: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/bin/alfresco-mmt.jar"
    dest: "{{ root_folder }}/app/alfresco/bin/alfresco-mmt.jar"

- name: unzip RMA zip file if needed
  become: yes
  become_user: alfresco
  unarchive:
    src: "{{ alfresco_rma_zip_path }}"
    remote_src: yes
    dest: "{{ root_folder }}/install/alfresco"
    creates: "{{ alfresco_rma_repo_amp }}"
    
- name: apply alfresco modules
  include_tasks: "apply-amp.yml"
  loop:
    - title: Alfresco Share Services AMP
      amp_path: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/amps/alfresco-share-services.amp"
      target_war: alfresco.war
    - title: Governance Services
      amp_path: "{{ alfresco_rma_repo_amp }}"
      target_war: alfresco.war
    - title: AGS Share
      amp_path: "{{ alfresco_rma_share_amp}}"
      target_war: share.war
  loop_control:
    loop_var: amp
      
- name: copy alfreco-global-properties sample file
  become: yes
  become_user: alfresco
  copy:
    remote_src: yes
    force: no
    src: "{{ root_folder }}/app/alfresco/shared/classes/alfresco-global.properties.sample"
    dest: "{{ root_folder }}/app/alfresco/shared/classes/alfresco-global.properties"

# in Alfresco CE, no support for encrypting property values
- name: protect alfresco-global.properties file
  become: yes
  become_user: alfresco
  file:
    path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco-global.properties"
    mode: 0600

# alfresco sync audit application
- name: ensure audit app folder exists
  become: yes
  become_user: alfresco
  file:
    path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/audit"
    state: directory
  when: enable_alfresco_sync | bool

- name: copy alfresco audit app xml
  become: yes
  become_user: alfresco
  copy:
    src: alfresco-audit-arkcase-extractors.xml
    dest: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/audit"
  when: enable_alfresco_sync | bool

- name: unarchive alfresco-pdf-renderer
  become: yes
  become_user: alfresco
  unarchive: 
    remote_src: yes
    src: "{{ root_folder }}/install/alfresco/{{ alfresco_zip_parent_folder }}/alfresco-pdf-renderer/alfresco-pdf-renderer-1.1-linux.tgz"
    dest: "{{ root_folder }}/app/alfresco/alfresco-pdf-renderer/"

# a version number is included in the path, e.g. /usr/lib64/ImageMagick-6.7.8
# so we use this shell command to find the right folder path.
- name: get the ImageMagick home folder
  shell: rpm -ql ImageMagick | grep /usr/lib64/ImageMagick | awk -F / '{ print $4 }' | sort -u
  register: imagemagick_home

# some token is included in the module path, e.g. /usr/lib64/ImageMagic-6.7.8/modules-Q16
# so we use this shell command to find the right module path.
- name: get the ImageMagick modules folder
  shell: rpm -ql ImageMagick | grep modules | grep coders | awk -F / '{ print $5 }' | sort -u
  register: imagemagick_modules

- name: populate alfresco-global.properties
  become: yes
  become_user: alfresco
  blockinfile:
    path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco-global.properties"
    insertbefore: BOF
    block: |
      # Alfresco 6+ uses ActiveMQ
      messaging.broker.url=ssl://{{ activemq_host }}:61616
      # Set this property unless you have explicitly chosen to expose some repository APIs without authentication
      solr.secureComms=https
      synchronization.syncOnStartup=true
      synchronization.syncWhenMissingPeopleLogIn=true
      synchronization.autoCreatePeopleOnLogin=false
      synchronization.import.cron=* */5 * * * ? *
      csrf.filter.enabled=false
      dir.root={{ root_folder }}/data/alfresco/alf_data
      db.name=alfresco
      db.username=alfresco
      db.password={{ default_database_password }}
      db.driver=org.mariadb.jdbc.Driver
      db.url=jdbc:mariadb://{{ database_host_name }}:3306/alfresco?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8&useSSL=true&requireSSL=true&enabledSslProtocolSuites=TLSv1.2&trustServerCertificate=false&serverSslCert={{ ssl_cert }}
      db.schema.update=true
      db.pool.max=50
      db.pool.validate.query=SELECT 1
      alfresco.context=alfresco
      alfresco.host={{ alfresco_host }}
      alfresco.port={{ alfresco_tls_port }}
      alfresco.protocol=https
      share.context=share
      share.host={{ alfresco_host }}
      share.port={{ alfresco_tls_port }}
      share.protocol=https
      # audit app support
      audit.enabled=true
      # libreoffice, for file format conversions, per https://docs.alfresco.com/6.1/tasks/lo-install.html
      jodconverter.enabled=true
      jodconverter.officeHome=/usr/lib64/libreoffice
      ooo.enabled=false
      # imagemagick, for image manipulation, per https://docs.alfresco.com/6.1/tasks/imagemagick-config.html
      img.root=/usr/lib64/{{ imagemagick_home.stdout }}
      img.dyn=/usr/lib64
      img.exe=/usr/bin/convert
      img.coders=${img.root}/{{ imagemagick_modules.stdout }}/coders
      img.config=${img.root}/config
      # PDF renderer, for thumbnails, per https://docs.alfresco.com/6.1/tasks/pdf-renderer-install.html
      alfresco-pdf-renderer.root={{ root_folder }}/app/alfresco/alfresco-pdf-renderer
      alfresco-pdf-renderer.exe=${alfresco-pdf-renderer.root}/alfresco-pdf-renderer
      external.authentication.proxyUserName=
      external.authentication.enabled=true
      external.authentication.defaultAdministratorUserNames=
      external.authentication.proxyHeader=X-Alfresco-Remote-User
      synchronization.synchronizeChangesOnly=false
      ldap.authentication.active=true
      ldap.authentication.allowGuestLogin=false
      ldap.authentication.java.naming.factory.initial=com.sun.jndi.ldap.LdapCtxFactory
      ldap.authentication.java.naming.security.authentication=simple
      ldap.synchronization.java.naming.security.authentication=simple
      ldap.authentication.escapeCommasInBind=false
      ldap.authentication.escapeCommasInUid=false
      ldap.authentication.defaultAdministratorUserNames=
      ldap.authentication.authenticateFTP=false
      ldap.synchronization.active=true
      ldap.synchronization.queryBatchSize=0
      ldap.synchronization.attributeBatchSize=0
      ldap.synchronization.modifyTimestampAttributeName=whenChanged
      ldap.synchronization.userFirstNameAttributeName=givenName
      ldap.synchronization.userLastNameAttributeName=sn
      ldap.synchronization.userEmailAttributeName=mail
      ldap.synchronization.userOrganizationalIdAttributeName=o
      ldap.synchronization.defaultHomeFolderProvider=largeHomeFolderProvider
      ldap.synchronization.groupIdAttributeName=cn
      ldap.synchronization.groupDisplayNameAttributeName=displayName
      ldap.synchronization.groupMemberAttributeName=member
      ldap.synchronization.enableProgressEstimation=true
      ldap.authentication.java.naming.read.timeout=0
      #################################################################
      # For Active Directory / Samba
      authentication.chain=external1:external,ldap1:ldap-ad,alfrescoNtlm1:alfrescoNtlm
      ldap.synchronization.groupQuery=objectClass\=group
      ldap.synchronization.groupDifferentialQuery=(&(objectclass\=group)(!(whenChanged<\={0})))
      ldap.synchronization.personQuery=objectClass\=user
      ldap.synchronization.personDifferentialQuery=(&(objectClass\=user)(!(whenChanged<\={0})))
      ldap.synchronization.timestampFormat=yyyyMMddHHmmss'.0Z'
      ldap.synchronization.groupType=group
      ldap.synchronization.personType=user
      ldap.synchronization.userIdAttributeName=samAccountName
      #### LDAP host-specific settings
      ldap.authentication.java.naming.provider.url={{ ldap_url }}
      ldap.synchronization.java.naming.security.principal={{ ldap_bind_user }}
      ldap.synchronization.java.naming.security.credentials={{ ldap_bind_password }}
      ldap.synchronization.groupSearchBase={{ ldap_group_base }}
      ldap.synchronization.userSearchBase={{ ldap_user_base }}
      ldap.authentication.userNameFormat=%s@{{ active_directory_domain }}
      # remove unneeded Alfresco activity
      system.usages.enabled=false
      cifs.enabled=false
      sync.mode=OFF
      syncService.mode=OFF
      activities.feed.notifier.enabled=false
      sync.pullJob.enabled=false
      sync.pushJob.enabled=false
      alfresco.cluster.enabled=false
      # Chemistry fixes
      opencmis.context.override=true
      opencmis.context.value=
      opencmis.servletpath.override=true
      opencmis.servletpath.value=
      opencmis.server.override=true
      opencmis.server.value=https://{{ external_host }}/alfresco/api

- name: change alfresco-global.properties to support second LDAP configuration
  block:
    - name: add ldap2 in AD/Samba section
      become: yes
      become_user: alfresco
      replace:
        path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco-global.properties"
        regexp: authentication\.chain=external1:external,ldap1:ldap-ad,alfrescoNtlm1:alfrescoNtlm
        replace: authentication.chain=external1:external,ldap1:ldap-ad,ldap2:ldap-ad,alfrescoNtlm1:alfrescoNtlm
    - name: remove LDAP host-specific settings section
      become: yes
      become_user: alfresco
      replace:
        path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco-global.properties"
        after: '#### LDAP host-specific settings'
        before: '# remove unneeded Alfresco activity'
        regexp: '.*'
        replace: ''
    - name: create ldap-ad folder structure
      become: yes
      become_user: alfresco
      file:
        path: "{{ item }}"
        state: directory
        recurse: yes
      loop:
        - "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/subsystems/Authentication/ldap-ad/ldap1"
        - "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/subsystems/Authentication/ldap-ad/ldap2"
    - name: create ldap1-ad.properties file and populate it 
      become: yes
      become_user: alfresco
      copy:
        dest: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/subsystems/Authentication/ldap-ad/ldap1/ldap-ad.properties"
        content: |
          ldap.authentication.java.naming.provider.url={{ ldap_url }}
          ldap.synchronization.java.naming.security.principal={{ ldap_bind_user }}
          ldap.synchronization.java.naming.security.credentials={{ ldap_bind_password }}
          ldap.synchronization.groupSearchBase={{ ldap_group_base }}
          ldap.synchronization.userSearchBase={{ ldap_user_base }}
          ldap.authentication.userNameFormat=%s@{{ active_directory_domain }}
    - name: create ldap2-ad.properties file and populate it
      become: yes
      become_user: alfresco
      copy:
        dest: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/subsystems/Authentication/ldap-ad/ldap2/ldap-ad.properties"
        content: |
          ldap.authentication.java.naming.provider.url={{ ldap_url }}
          ldap.synchronization.java.naming.security.principal={{ ldap_bind_user }}
          ldap.synchronization.java.naming.security.credentials={{ ldap_bind_password }}
          ldap.synchronization.groupSearchBase={{ ldap_portal_group_no_base }},{{ ldap_base }}
          ldap.synchronization.userSearchBase={{ ldap_portal_user_no_base }},{{ ldap_base }}
          ldap.authentication.userNameFormat=%s@{{ active_directory_domain }}
  when: foia_portal_context is defined        

- name: configure alfresco.log location
  block:
    - name: see if ce-log4j.properties already exists
      become: yes
      become_user: alfresco
      stat:
        path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/ce-log4j.properties"
      register: log4j_exists
    - name: unzip default log4j.properties
      become: yes
      become_user: alfresco
      command: unzip -d "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension" -j "{{ root_folder }}/app/alfresco/webapps/alfresco.war" WEB-INF/classes/log4j.properties
      when: log4j_exists.stat.exists == False
      register: log4j_unzipped
    - name: configure alfresco.log location
      become: yes
      become_user: alfresco
      replace:
        path: "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/log4j.properties"
        regexp: log4j.appender.File.File=alfresco.log
        replace: log4j.appender.File.File={{ root_folder }}/log/alfresco/alfresco.log
      when: log4j_unzipped is changed
    - name: rename log4j.properties
      become: yes
      become_user: alfresco
      command: mv "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/log4j.properties" "{{ root_folder }}/app/alfresco/shared/classes/alfresco/extension/ce-log4j.properties"
      when: log4j_unzipped is changed
    - name: remove default log4j.properties
      become: yes
      become_user: alfresco
      command: zip -d "{{ root_folder }}/app/alfresco/webapps/alfresco.war" WEB-INF/classes/log4j.properties
      when: log4j_unzipped is changed
      
- name: configure share.log location
  block:
    - name: see if temp share log4j.properties already exists
      become: yes
      become_user: alfresco
      stat:
        path: "{{ root_folder }}/tmp/alfresco/WEB-INF/classes/log4j.properties"
      register: share_log4j_exists
    - name: unzip share default log4j.properties
      become: yes
      become_user: alfresco
      command: unzip -d {{ root_folder }}/tmp/alfresco {{ root_folder }}/app/alfresco/webapps/share.war WEB-INF/classes/log4j.properties
      when: share_log4j_exists.stat.exists == False
      register: share_log4j_unzipped
    - name: configure share.log location
      become: yes
      become_user: alfresco
      replace:
        path: "{{ root_folder }}/tmp/alfresco/WEB-INF/classes/log4j.properties"
        regexp: log4j.appender.File.File=share.log
        replace: log4j.appender.File.File={{ root_folder }}/log/alfresco/share.log
      when: share_log4j_unzipped is changed
      register: share_log4j_updated
    - name: update share.war with new share location
      become: yes
      become_user: alfresco
      command: zip -r "{{ root_folder }}/app/alfresco/webapps/share.war" WEB-INF
      args:
        chdir: "{{ root_folder }}/tmp/alfresco"
      when: share_log4j_updated is changed
      
      
- name: Alfresco systemd unit file
  become: yes
  template:
    src: "alfresco.service"
    dest: /etc/systemd/system/alfresco.service
    
- name: alfresco logrotate
  become: yes
  template: 
    src: "alfresco"
    dest: /etc/logrotate.d/alfresco

- name: enable Alfresco to start on boot
  become: yes
  systemd:
    name: alfresco
    enabled: yes
    masked: no

- name: start Alfresco
  become: yes
  systemd:
    daemon_reload: true
    name: alfresco
    state: started

- name: wait for Alfresco startup to finish
  wait_for:
    port: 7070
    delay: 3
    timeout: 180

- name: Wait for URI
  uri:
    url: https://localhost:7070/share/page/
    validate_certs: false
    follow_redirects: all
  register: _result
  until: _result.status == 200
  retries: 100
  delay: 5

# make it so the filter URL pattern for the sync service
# is not the actual sync service URL, this disables
# CSRF filtering on the sync service, and that means
# we can trigger an Alfresco LDAP sync from ArkCase
- name: disable CSRF for Alfresco ldap sync service, part 1
  become: yes
  become_user: alfresco
  replace:
    path: "{{ root_folder }}/app/alfresco/webapps/alfresco/WEB-INF/web.xml"
    regexp: "/service/enterprise/admin/*"
    replace: "/no-such-service/enterprise/admin/*"
  register: web_xml_one

- name: disable CSRF for Alfresco ldap sync service, part 2
  become: yes
  become_user: alfresco
  replace:
    path: "{{ root_folder }}/app/alfresco/webapps/alfresco/WEB-INF/web.xml"
    regexp: "/s/enterprise/admin/*"
    replace: "/no-such-s/enterprise/admin/*"
  register: web_xml_two
  
- name: update alfresco.war with web.xml change
  become: yes
  become_user: alfresco
  command: zip ../alfresco.war WEB-INF/web.xml
  args:
    chdir: "{{ root_folder }}/app/alfresco/webapps/alfresco"
  when: web_xml_one is changed or web_xml_two is changed

# Alfresco CE 6.1 download... but, there is no compatible RMA yet,
# so we can't use it
#https://download.alfresco.com/cloudfront/release/community/201901-GA-build-205/alfresco-content-services-community-distribution-6.1.2-ga.zip

# install docs: https://docs.alfresco.com/community/concepts/install-community-intro.html

<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <beans:bean class="com.armedia.acm.crypto.properties.AcmEncryptablePropertySourcesPlaceholderConfigurer">
        <beans:property name="encryptablePropertyUtils" ref="acmEncryptablePropertyUtils"/>
        <beans:property name="location" value="file:${user.home}/.arkcase/acm/spring/spring-config-{{ ldap_user_domain_bean_name }}-ldap.properties"/>
    </beans:bean>

    <beans:bean name="{{ ldap_user_domain_bean_name }}_ldapSyncJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <beans:property name="jobClass" value="com.armedia.acm.services.users.service.ldap.LdapSyncJobDescriptor"/>
        <beans:property name="durability" value="true"/>
    </beans:bean>

    <beans:bean name="{{ ldap_user_domain_bean_name }}_ldapPartialSyncJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <beans:property name="jobClass" value="com.armedia.acm.services.users.service.ldap.LdapPartialSyncJobDescriptor"/>
        <beans:property name="durability" value="true"/>
    </beans:bean>

    <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapSyncJobDescriptor" class="com.armedia.acm.services.users.service.ldap.LdapSyncJobDescriptor" parent="acmJobDescriptor">
        <beans:property name="ldapSyncService" ref="{{ ldap_user_domain_bean_name }}_ldapSyncService"/>
    </beans:bean>    

     <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapPartialSyncJobDescriptor" class="com.armedia.acm.services.users.service.ldap.LdapPartialSyncJobDescriptor" parent="acmJobDescriptor">
        <beans:property name="ldapSyncService" ref="{{ ldap_user_domain_bean_name }}_ldapSyncService"/>
    </beans:bean> 

    <!-- ensure this bean id is unique across all the partial LDAP sync beans. -->
    <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapSyncService" class="com.armedia.acm.services.users.service.ldap.LdapSyncService">
        <!-- ldapSyncConfig: ref must match an AcmLdapSyncConfig bean, which should be defined below. -->
        <beans:property name="ldapSyncConfig" ref="{{ ldap_user_domain_bean_name }}_sync"/>
        <!-- do not change ldapDao or ldapSyncDatabaseHelper properties. -->
        <beans:property name="ldapDao" ref="customPagedLdapDao"/>
        <beans:property name="springLdapUserDao" ref="springLdapUserDao"/>
        <beans:property name="auditPropertyEntityAdapter" ref="auditPropertyEntityAdapter"/>
        <beans:property name="syncEnabled" value='${ldapConfig.syncEnabled}'/>
        <beans:property name="ldapSyncProcessor" ref="ldapSyncProcessor"/>
        <beans:property name="schedulerService" ref="acmSchedulerService"/>
    </beans:bean>

    <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapUrl" class="java.lang.String">
        <beans:constructor-arg value='${ldapConfig.ldapUrl}'/>
    </beans:bean>

    <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapUrls" factory-bean="{{ ldap_user_domain_bean_name }}_ldapUrl" factory-method="split">
        <beans:constructor-arg value=','/>
    </beans:bean>

    <beans:bean id="{{ ldap_user_domain_bean_name }}_ldap_config" class="com.armedia.acm.services.users.model.ldap.AcmLdapConfig">
        <!-- ldapUrl: URL of the ldap instance (e.g. ldap://armedia.com:389) -->
        <beans:property name="ldapUrl" ref='{{ ldap_user_domain_bean_name }}_ldapUrls'/>
        <beans:property name="baseDC" value='${ldapConfig.base}'/>
        <!-- only specify authUserDn if your LDAP server requires user authentication (do not specify if you
            are using anonymous authentication -->
        <beans:property name="authUserDn" value='${ldapConfig.authUserDn}'/>
        <!-- only specify authUserPassword if you also specify authUserDn -->
        <beans:property name="authUserPassword" value='${ldapConfig.authUserPassword}'/>
        <!-- userIdAttributeName: use "samAccountName" if your LDAP server is Active Directory.  Most other LDAP
             servers use "uid". -->
        <beans:property name="userIdAttributeName" value='${ldapConfig.userIdAttributeName}'/>
        <!-- mailAttributeName: use "mail"  Most  LDAP servers use "mail". -->
        <beans:property name="mailAttributeName" value="mail"/>
        <!-- ignorePartialResultException: true if your LDAP server is Active Directory, false for other LDAP servers -->
        <beans:property name="ignorePartialResultException" value="true"/>
        <!-- referral: "follow" if you want to follow LDAP referrals, "ignore" otherwise (search "ldap referral" for more info). -->
        <beans:property name="referral" value="follow"/>
        <beans:property name="directoryName" value='${ldapConfig.id}'/>
        <beans:property name="directoryType" value='${ldapConfig.directoryType}'/>
        <!-- used for activedirectory only, in case of usernames are longer than 20 characters, for example portal registered users -->
        <beans:property name="generateUsernameEnabled" value='${ldapConfig.autoGenerateUserId}'/>
    </beans:bean>

    <beans:bean id="{{ ldap_user_domain_bean_name }}_sync" class="com.armedia.acm.services.users.model.ldap.AcmLdapSyncConfig" parent="{{ ldap_user_domain_bean_name }}_ldap_config">
        <!-- groupSearchBase is the full tree under which groups are found (e.g. ou=groups,dc=armedia,dc=com). -->
        <beans:property name="groupSearchBase" value='${ldapConfig.groupSearchBase}'/>
        <!-- groupSearchFilter is an LDAP filter to restrict which entries under the groupSearchBase are processsed -->
        <beans:property name="groupSearchFilter" value='${ldapConfig.groupSearchFilter}'/>
        <!-- filter to retrieve all groups with a name greater than some group name - used to page group search results -->
        <beans:property name="groupSearchPageFilter" value='${ldapConfig.groupSearchPageFilter}'/>
        <beans:property name="allUsersFilter" value="${ldapConfig.allUsersFilter}"/>
        <beans:property name="allChangedUsersFilter" value="${ldapConfig.allChangedUsersFilter}"/>
        <beans:property name="allUsersPageFilter" value="${ldapConfig.allUsersPageFilter}"/>
        <beans:property name="allChangedUsersPageFilter" value="${ldapConfig.allChangedUsersPageFilter}"/>
        <beans:property name="userDomain" value='${ldapConfig.userDomain}'/>
        <beans:property name="userPrefix" value="${ldapConfig.userPrefix}"/>
        <beans:property name="groupPrefix" value="${ldapConfig.groupPrefix}"/>
        <beans:property name="userControlGroup" value="${ldapConfig.userControlGroup}"/>
        <beans:property name="groupControlGroup" value="${ldapConfig.groupControlGroup}"/>
        <beans:property name="userSearchBase" value='${ldapConfig.userSearchBase}'/>
        <beans:property name="userSearchFilter" value='${ldapConfig.userSearchFilter}'/>
        <beans:property name="groupSearchFilterForUser" value='${ldapConfig.groupSearchFilterForUser}'/>
        <beans:property name="syncPageSize" value='${ldapConfig.syncPageSize}'/>
        <beans:property name="allUsersSortingAttribute" value='${ldapConfig.allUsersSortingAttribute}'/>
        <beans:property name="groupsSortingAttribute" value='${ldapConfig.groupsSortingAttribute}'/>
        <beans:property name="userSyncAttributes" value='${ldapConfig.userAttributes}'/>
        <beans:property name="changedGroupSearchFilter" value='${ldapConfig.changedGroupSearchFilter}'/>
        <beans:property name="changedGroupSearchPageFilter" value='${ldapConfig.changedGroupSearchPageFilter}'/>
        <beans:property name="partialSyncCron" value='${ldapConfig.partialSyncCron}'/>
        <beans:property name="fullSyncCron" value='${ldapConfig.fullSyncCron}'/>
    </beans:bean>

    <beans:bean id="{{ ldap_user_domain_bean_name }}_authenticate" class="com.armedia.acm.services.users.model.ldap.AcmLdapAuthenticateConfig"
        parent="{{ ldap_user_domain_bean_name }}_ldap_config">
        <!-- userSearchBase is the tree under which users are found (e.g. cn=users).  -->
        <beans:property name="searchBase" value='${ldapConfig.userSearchBase}'/>
        <beans:property name="enableEditingLdapUsers" value='${ldapConfig.enableEditingLdapUsers}'/>
    </beans:bean>

    <!-- NOTE, do NOT activate both Kerberos and LDAP profiles at the same time.  When the kerberos profile
         is enabled, the LDAP authentication is still used as a backup, in case Kerberos auth fails.  That 
         is why these beans are active both for Kerberos and LDAP. -->
    <beans:beans profile="ldap,kerberos,externalAuth,mfa-okta,externalSaml">

        <beans:bean id="{{ ldap_user_domain_bean_name }}_userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
            <beans:constructor-arg index="0" value='${ldapConfig.userSearchBase}'/>
            <beans:constructor-arg index="1" value='${ldapConfig.userIdAttributeName}={0}'/>
            <beans:constructor-arg index="2" ref="{{ ldap_user_domain_bean_name }}_contextSource"/>
        </beans:bean>

        <beans:bean id="{{ ldap_user_domain_bean_name }}_authenticationProvider" class="com.armedia.acm.auth.AcmLdapAuthenticationProvider">
            <beans:constructor-arg>
                <beans:bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
                    <beans:constructor-arg ref="{{ ldap_user_domain_bean_name }}_contextSource"/>
                    <beans:property name="userSearch" ref="{{ ldap_user_domain_bean_name }}_userSearch"/>
                </beans:bean>
            </beans:constructor-arg>
            <beans:constructor-arg>
                <beans:bean class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
                    <beans:constructor-arg ref="{{ ldap_user_domain_bean_name }}_contextSource"/>
                    <beans:constructor-arg value='${ldapConfig.groupSearchBase}'/>
                    <beans:property name="groupSearchFilter" value="member={0}"/>
                    <beans:property name="rolePrefix" value=""/>
                    <beans:property name="searchSubtree" value="true"/>
                    <beans:property name="convertToUpperCase" value="true"/>
                    <beans:property name="ignorePartialResultException" value="true"/>
                </beans:bean>
            </beans:constructor-arg>
            <beans:property name="userDao" ref="userJpaDao"/>
            <beans:property name="ldapSyncService" ref="{{ ldap_user_domain_bean_name }}_ldapSyncService"/>
        </beans:bean>

        <beans:bean id="{{ ldap_user_domain_bean_name }}_contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
            <beans:property name="urls" ref='{{ ldap_user_domain_bean_name }}_ldapUrls'/>
            <beans:property name="base" value='${ldapConfig.base}'/>
            <beans:property name="userDn" value='${ldapConfig.authUserDn}'/>
            <beans:property name="password" value='${ldapConfig.authUserPassword}'/>
            <beans:property name="pooled" value="true"/>
            <!-- AD Specific Setting for avoiding the partial exception error -->
            <beans:property name="referral" value="follow"/>
        </beans:bean>

        <beans:bean id="{{ ldap_user_domain_bean_name }}_contextSourceProxy"
            class="org.springframework.ldap.transaction.compensating.manager.TransactionAwareContextSourceProxy">
            <beans:constructor-arg ref="{{ ldap_user_domain_bean_name }}_contextSource"/>
        </beans:bean>

        <beans:bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
            <beans:constructor-arg ref="{{ ldap_user_domain_bean_name }}_contextSourceProxy"/>
        </beans:bean>

        <beans:bean id="transactionManager"
            class="org.springframework.ldap.transaction.compensating.manager.ContextSourceTransactionManager">
            <beans:property name="contextSource" ref="{{ ldap_user_domain_bean_name }}_contextSourceProxy"/>
        </beans:bean>

        <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapSync" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
            <beans:property name="transactionManager" ref="transactionManager"/>
            <beans:property name="target" ref="{{ ldap_user_domain_bean_name }}_ldapSyncService"/>
            <beans:property name="transactionAttributes">
                <beans:props>
                    <beans:prop key="*">PROPAGATION_REQUIRES_NEW</beans:prop>
                </beans:props>
            </beans:property>
        </beans:bean>

        <!--
        Authenticates a user id and password against LDAP directory.  To support multiple LDAP configurations, create multiple Spring 
        beans, each with its own LdapAuthenticateService.
        -->
        <beans:bean id="{{ ldap_user_domain_bean_name }}_ldapAuthenticateService" class="{{ ldap_authentication_service_class }}">
            <!-- ldapAuthenticateConfig: ref must match an AcmLdapAuthenticateConfig bean -->
            <beans:property name="ldapAuthenticateConfig" ref="{{ ldap_user_domain_bean_name }}_authenticate"/>
            <!-- ldapSyncConfig: ref must match an AcmLdapSyncConfig bean -->
            <beans:property name="ldapSyncConfig" ref="{{ ldap_user_domain_bean_name }}_sync"/>
            <!-- do not change ldapDao properties. -->
            <beans:property name="ldapDao" ref="customPagedLdapDao"/>
            <beans:property name="userDao" ref="userJpaDao"/>
            <beans:property name="ldapUserDao" ref="springLdapUserDao"/>
        </beans:bean>

    </beans:beans>

    <beans:beans profile="externalAuth,externalSaml">
        <beans:bean id="{{ ldap_user_domain_bean_name }}_userDetailsService" class="com.armedia.acm.auth.AcmLdapUserDetailsService">
            <beans:constructor-arg index="0" ref="{{ ldap_user_domain_bean_name }}_userSearch"/>
            <beans:constructor-arg index="1">
                <beans:bean id="{{ ldap_user_domain_bean_name }}_authoritiesPopulator"
                    class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
                    <beans:constructor-arg index="0" ref="{{ ldap_user_domain_bean_name }}_contextSource"/>
                    <beans:constructor-arg index="1" value='${ldapConfig.groupSearchBase}'/>
                </beans:bean>
            </beans:constructor-arg>
            <beans:property name="acmLdapSyncConfig" ref="{{ ldap_user_domain_bean_name }}_sync"/>
        </beans:bean>
        <beans:bean id="{{ ldap_user_domain_bean_name }}_externalAuthProvider"
            class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
            <beans:property name="preAuthenticatedUserDetailsService">
                <beans:bean id="{{ ldap_user_domain_bean_name }}_userDetailsServiceWrapper"
                    class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
                    <beans:property name="userDetailsService" ref="{{ ldap_user_domain_bean_name }}_userDetailsService"/>
                </beans:bean>
            </beans:property>
        </beans:bean>
    </beans:beans>
</beans:beans>

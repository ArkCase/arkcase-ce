- name: install cryptography
  become: yes
  pip:
    name: cryptography

- name: create pki folder structure
  become: yes
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "/etc/tls"
    - "/etc/tls/private"
    - "/etc/tls/csr"
    - "/etc/tls/crt"
    - "/etc/tls/ca"

# Generate an OpenSSL private key with the default values (4096 bits, RSA)
- name: generate root ca private key
  become: yes
  openssl_privatekey:
    path: "/etc/tls/private/arkcase-root-passphrase.pem"
    type: RSA
    size: 4096
    cipher: "auto"
    passphrase: "m0rn1ngD$w"

- name: remove passphrase from private key
  become: yes
  command: openssl rsa -in "/etc/tls/private/arkcase-root-passphrase.pem" -out "/etc/tls/private/arkcase-root.pem" -passin pass:'m0rn1ngD$w'

- name: generate root ca certificate signing request
  become: yes
  openssl_csr:
    basic_constraints_critical: yes
    basic_constraints:
      - CA:TRUE
    key_usage_critical: yes
    key_usage:
      - Digital Signature
      - Certificate Sign
      - CRL Sign
    digest: sha256
    path: "/etc/tls/csr/arkcase-root.csr"
    privatekey_path: "/etc/tls/private/arkcase-root.pem"
    country_name: US
    state_or_province_name: VA
    locality_name: Vienna
    organization_name: ArkCase
    organizational_unit_name: Product Development
    # the common_name has to be a DNS-compatible name now.
    common_name: root.authority.{{ base_domain }}
    email_address: info@arkcase.com
  register: root_csr

- name: Sign root ca certificate
  become: yes
  openssl_certificate:
    path: "/etc/tls/ca/arkcase-root.crt"
    privatekey_path: "/etc/tls/private/arkcase-root.pem"
    csr_path: "/etc/tls/csr/arkcase-root.csr"
    provider: selfsigned
  when: root_csr is changed
  register: root_cert

- name: generate intermediate private key
  become: yes
  openssl_privatekey:
    path: "/etc/tls/private/arkcase-intermediate-pp.pem"
    type: RSA
    size: 4096
    cipher: "auto"
    passphrase: "m0rn1ngD$w"
  register: intermediate_private_key

- name: remove passphrase from intermediate key
  become: yes
  command: openssl rsa -in "/etc/tls/private/arkcase-intermediate-pp.pem" -out "/etc/tls/private/arkcase-intermediate.pem" -passin pass:'m0rn1ngD$w'

# NOTE the intermediate CSR is signed with the intermediate key
- name: generate intermediate csr
  become: yes
  openssl_csr:
    basic_constraints_critical: yes
    basic_constraints:
      - CA:TRUE
      - pathlen:0
    key_usage_critical: yes
    key_usage:
      - Digital Signature
      - Certificate Sign
      - CRL Sign
    digest: sha256
    path: "/etc/tls/csr/arkcase-intermediate.csr"
    privatekey_path: "/etc/tls/private/arkcase-intermediate.pem"
    country_name: US
    state_or_province_name: VA
    locality_name: Vienna
    organization_name: ArkCase
    organizational_unit_name: Product Development
    email_address: info@arkcase.com
    common_name: intermediate.authority.{{ base_domain }}
  register: intermediate_csr

# the intermediate cert is signed with the root key
# ownca provider makes it so the issuer of this certificate
# is the root cert... "selfsigned" provider means the cert
# is always self-signed (issuer same as subject).
- name: Sign intermediate CSR
  become: yes
  openssl_certificate:
    path: "/etc/tls/crt/arkcase-intermediate.crt"
    ownca_path: "/etc/tls/ca/arkcase-root.crt"
    ownca_privatekey_path: "/etc/tls/private/arkcase-root.pem"
    csr_path: "/etc/tls/csr/arkcase-intermediate.csr"
    provider: ownca
  when: intermediate_csr is changed
  register: intermediate_cert

- name: generate the chain cert file
  become: yes
  shell: cat /etc/tls/crt/arkcase-intermediate.crt /etc/tls/ca/arkcase-root.crt > {{ ssl_ca }}
  when: intermediate_cert is changed or root_cert is changed

# Although 4096 bits is slightly more secure than 2048 bits,
# it slows down TLS handshakes and significantly increases
# processor load during handshakes. For this reason, most
# websites use 2048-bit pairs.
- name: generate server private key
  become: yes
  openssl_privatekey:
    path: "/etc/tls/private/ssl-key-pp.pem"
    type: RSA
    size: 2048
    mode: 0644
    cipher: "auto"
    passphrase: "m0rn1ngD$w"
  register: server_private_key

- name: remove passphrase from server key
  become: yes
  command: openssl rsa -in "/etc/tls/private/ssl-key-pp.pem" -out "{{ ssl_key }}" -passin pass:'m0rn1ngD$w'

- name: set public_host if needed
  set_fact:
    public_host: "{{ external_host }}"
  when: public_host is not defined

- name: generate server csr
  become: yes
  openssl_csr:
    basic_constraints_critical: no
    basic_constraints:
      - CA:FALSE
    key_usage_critical: yes
    key_usage:
      - Digital Signature
      - keyEncipherment
    extended_key_usage_critical: no
    extended_key_usage:
      - serverAuth
    digest: sha256
    path: "/etc/tls/csr/arkcase-server.csr"
    privatekey_path: "{{ ssl_key }}"
    country_name: US
    state_or_province_name: VA
    locality_name: Vienna
    organization_name: ArkCase
    organizational_unit_name: Product Development
    email_address: info@arkcase.com
    common_name: "{{ internal_host }}"
    subject_alt_name:
      - DNS:{{ external_host }}
      - DNS:{{ internal_host }}
      - DNS:{{ activemq_host }}
      - DNS:{{ alfresco_host }}
      - DNS:{{ arkcase_host }}
      - DNS:{{ database_host }}
      - DNS:{{ mariadb_host }}
      - DNS:{{ pentaho_host }}
      - DNS:{{ snowbound_host }}
      - DNS:{{ solr_host }}
      - DNS:{{ public_host }}
  register: server_csr

# the server cert is signed with the intermediate key
- name: Sign server CSR
  become: yes
  openssl_certificate:
    path: "{{ ssl_cert }}"
    ownca_path: "/etc/tls/crt/arkcase-intermediate.crt"
    ownca_privatekey_path: "/etc/tls/private/arkcase-intermediate.pem"
    csr_path: "/etc/tls/csr/arkcase-server.csr"
    provider: ownca
    mode: 0644
  when: server_csr is changed

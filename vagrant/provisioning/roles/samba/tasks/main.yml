- name: Samba folders
  become: yes
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /opt/install/samba
    - /opt/install/samba/samba-{{ samba_version }}
    - /opt/data/samba
    - /opt/log/samba
    - /opt/app/samba
    - /opt/app/samba/lib
  register: samba_folder_structure

- name: enable logrotate for samba log folder if necessary
  include_tasks: "{{ role_path }}/../common/tasks/logrotate.yml"
  loop:
    - samba

- include_tasks: "{{ role_path }}/../common/tasks/download.yml"
  loop:
    - name: "Samba"
      dest: "/opt/install/samba/samba-{{ samba_version }}.tar.gz"
      owner: "root"
      url: "https://download.samba.org/pub/samba/stable/samba-{{ samba_version }}.tar.gz"

- name: unarchive Samba distribution
  become: yes
  unarchive:
    remote_src: yes
    src: /opt/install/samba/samba-{{ samba_version }}.tar.gz
    dest: /opt/install/samba/samba-{{ samba_version }}
    creates: /opt/install/samba/samba-{{ samba_version }}/samba-{{ samba_version }}/README
  register: samba_unarchived

- name: Samba and LDAP required packages
  become: yes
  yum:
    state: installed
    name: 
      - lmdb
      - lmdb-devel
      - gpgme-devel
      - jansson-devel
      - libarchive-devel
      - python-devel
      - gnutls-devel
      - libacl-devel
      - openldap-devel
      - openldap-clients
      - pam-devel
      - python-ldap
      - python36
      - python36-devel

- name: install Python packages
  become: yes
  pip:
    name: python-config
    
- name: configure Samba, this will take 5 - 10 minutes
  become: yes
  command: ./configure --enable-debug --enable-selftest --with-ads --with-systemd --with-winbind --enable-gnutls --prefix=/opt/app/samba --datarootdir=/opt/data/samba --with-logdir=/opt/log/samba --localstatedir=/opt/data/samba  --libdir=/opt/app/samba/lib
  args:
    chdir: /opt/install/samba/samba-{{ samba_version }}/samba-{{ samba_version }}
    creates: /opt/install/samba/samba-{{ samba_version }}/samba-{{ samba_version }}/.lock-wscript
  register: samba_configured

- name: build Samba, this will take 10 - 20 minutes
  become: yes
  command: make
  args:
    chdir: /opt/install/samba/samba-{{ samba_version }}/samba-{{ samba_version }}
  when: samba_configured is changed
  register: samba_build

- name: install Samba
  become: yes
  command: make install
  args:
    chdir: /opt/install/samba/samba-{{ samba_version }}/samba-{{ samba_version }}
  register: samba_install
  when: samba_build is changed

- name: provision arkcase-ce.local domain
  become: yes
  command: /opt/app/samba/bin/samba-tool domain provision --use-rfc2307 --domain={{ samba_domain }} --realm={{ samba_realm }} --dns-backend=SAMBA_INTERNAL --server-role={{ samba_server_role }} --host-ip={{ samba_host_ip }} --adminpass={{ samba_admin_password }}
  args:
    creates: /opt/app/samba/etc/smb.conf
  register: samba_provisioned

- name: copy Samba Kerberos config to system config
  become: yes
  command: cp /opt/app/samba/private/krb5.conf /etc/krb5.conf
  when: samba_provisioned is changed

# samba requires mode 0600 on the TLS cert and key files, so we have to
# copy them to the Samba folder
- name: copy TLS cert and key files
  become: yes
  copy:
    remote_src: yes
    src: "{{ item }}"
    dest: /opt/app/samba/private/tls/
    mode: 0600
  loop:
    - /etc/ssl/private/arkcase-server.pem
    - /etc/ssl/crt/arkcase-server.crt
    - /etc/ssl/crt/arkcase-chain.crt

- name: set TLS propertes
  become: yes
  blockinfile:
    path: /opt/app/samba/etc/smb.conf
    insertafter: "\\[global\\]"
    block: |
      tls enabled = yes
      tls certfile = /opt/app/samba/private/tls/arkcase-server.crt
      tls keyfile = /opt/app/samba/private/tls/arkcase-server.pem
      tls cafile =  /opt/app/samba/private/tls/arkcase-chain.crt
  
- name: copy Samba systemd unit file
  become: yes
  copy:
    src: samba.service
    dest: /etc/systemd/system/samba.service
  register: samba_systemd

- name: enable Samba to start on boot
  become: yes
  systemd:
    name: samba
    enabled: yes
    masked: no

- name: start Samba
  become: yes
  systemd:
    daemon_reload: true
    name: samba
    state: started

- name: open Samba TLS port in firewall
  become: yes
  firewalld:
    zone: public
    port: 636/tcp
    permanent: yes
    state: enabled
  register: samba_firewall

- name: reload firewall if necessary
  become: yes
  command: firewall-cmd --reload
  when: samba_firewall is changed

- name: add arkcase organizational units
  ldap_entry:
    server_uri: ldaps://{{ arkcase_host_name }}:636
    validate_certs: no
    bind_dn: CN=Administrator,CN=Users,{{ ldap_base }}
    bind_pw: "{{ samba_admin_password }}"
    dn: "{{ item.ou }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item.description }}"
  loop:
    - { ou: "OU=ArkCase,{{ ldap_base }}", description: "Container for ArkCase users and groups" }
    - { ou: "OU=Groups,OU=ArkCase,{{ ldap_base }}", description: "Container for ArkCase groups" }
    - { ou: "OU=Users,OU=ArkCase,{{ ldap_base }}", description: "Container for ArkCase users" }

- name: add arkcase groups
  ldap_entry:
    server_uri: ldaps://{{ arkcase_host_name }}:636
    validate_certs: no
    bind_dn: CN=Administrator,CN=Users,{{ ldap_base }}
    bind_pw: "{{ samba_admin_password }}"
    dn: "CN={{ item.name }},OU=Groups,OU=ArkCase,{{ ldap_base }}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_groups|flatten }}"
     
- name: add users
  include_tasks: add-user.yml
  loop: "{{ ldap_users }}"    
  loop_control:
    loop_var: u  

- name: see if administrator password is non-expiring already
  shell: /opt/app/samba/bin/pdbedit -Lv Administrator | grep "Account Flags"
  register: admin_account_flags
  changed_when: false

- name: set administrator password to never expire
  command: /opt/app/samba/bin/samba-tool user setexpiry Administrator --noexpiry
  when: "'X' not in admin_account_flags.stdout"
    
          

      
      
      

---
# tasks file for confluent-install
- name: Install curl and which
  yum:
    name: "{{ packages }}"
  vars:
    packages:
    - curl
    - which

- name: Install Confluent Platform public key
  rpm_key:
    state: present
    key: https://packages.confluent.io/rpm/{{ confluent_major_version | default(5.4) }}/archive.key

- name: Create Confluent repo (1/2)
  yum_repository:
    name: Confluent.dist
    description: Confluent repository (dist)
    baseurl: https://packages.confluent.io/rpm/{{ confluent_major_version | default(5.4) }}/{{ confluent_minor_version | default(7) }}
    gpgcheck: yes
    gpgkey: https://packages.confluent.io/rpm/{{ confluent_major_version | default(5.4) }}/archive.key
    enabled: yes
    file: confluent

- name: Create Confluent repo (2/2)
  yum_repository:
    name: Confluent
    description: Confluent repository
    baseurl: https://packages.confluent.io/rpm/{{ confluent_major_version | default(5.4) }}
    gpgcheck: yes
    gpgkey: https://packages.confluent.io/rpm/{{ confluent_major_version | default(5.4) }}/archive.key
    enabled: yes
    file: confluent

# The yum module does not support clearing yum cache in an idempotent way!
- name: Clean the yum caches
  command: yum clean all
  args:
    warn: False

- name: Install Confluent Platform
  yum:
    name: confluent-platform-{{ confluent_scala_version | default(2.12) }}
    state: present

- name: Kafka folders
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    group: confluent
    owner: cp-kafka
  loop:
    - "{{ root_folder }}/data/kafka"
    - "{{ root_folder }}/log/kafka"

- name: KSQL folders
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    group: confluent
    owner: cp-ksql
  loop:
    - "{{ root_folder }}/data/ksql"
    - "{{ root_folder }}/log/ksql"

- name: Schema-registry folders
  become: yes
  file:
    path: "{{ root_folder }}/log/schema-registry"
    state: directory
    group: confluent
    owner: cp-schema-registry

- name: Control-center folders
  become: yes
  file:
    path: "{{ root_folder }}/log/control-center"
    state: directory
    group: confluent
    owner: cp-control-center

- name: Kafka-rest folders
  become: yes
  file:
    path: "{{ root_folder }}/log/kafka-rest"
    state: directory
    group: confluent
    owner: cp-kafka-rest

- name: Change kafka data location
  become: yes
  template:
    src: server.properties
    dest: /etc/kafka/
    force: yes
    backup: yes

- name: Change ksql log location
  become: yes
  lineinfile:
    path: /usr/lib/systemd/system/confluent-ksql.service
    backup: yes
    regex: "LOG=/var/log/confluent/ksql"
    line: "LOG_DIR={{ root_folder }}/log/ksql"
  register: systemd_ksql

- name: Change kafka-rest log location
  become: yes
  lineinfile:
    path: /usr/lib/systemd/system/confluent-kafka-rest.service
    backup: yes
    regex: "LOG=/var/log/confluent/kafka-rest"
    line: "LOG_DIR={{ root_folder }}/log/kafka-rest"
  register: systemd_kafka-rest

- name: Change control-center log location
  become: yes
  lineinfile:
    path: /usr/lib/systemd/system/confluent-control-center.service
    backup: yes
    regex: "LOG_DIR=/var/log/confluent/control-center"
    line: "LOG_DIR={{ root_folder }}/log/control-center"
  register: systemd_control-center  

- name: Change schema-registry log location
  become: yes
  lineinfile:
    path: /usr/lib/systemd/system/confluent-schema-registry.service
    backup: yes
    regex: "LOG=/var/log/confluent/schema-registry"
    line: "LOG_DIR={{ root_folder }}/log/schema-registry"
  register: systemd_schema-registry

- name: Change ksql data location
  become: yes
  template:
    src: ksql-server.properties
    dest: /etc/ksql/
    force: yes
    backup: yes

- name: read control-center-production.properties
  shell: cat /etc/confluent-control-center/control-center-production.properties
  register: control_center_production_properties_contents
  changed_when: false

- name: Enable Control Center to work with 1 broker
  lineinfile:
    path: /etc/confluent-control-center/control-center-production.properties
    state: present
    insertafter: EOF
    line: "{{ item }}"
  loop:
    - "confluent.controlcenter.internal.topics.replication=1"
    - "confluent.controlcenter.command.topic.replication=1"
    - "confluent.monitoring.interceptor.topic.replication=1"
    - "confluent.metrics.topic.replication=1"
  when: not control_center_production_properties_contents.stdout is match('^' + item)

- name: Change logrotation policy for Kafka app logs
  become: yes
  template:
    src: log4j.properties
    dest: /etc/kafka/
    force: yes
    backup: yes

- name: Change logrotation policy for Connect logs
  become: yes
  template:
    src: connect-log4j.properties
    dest: /etc/kafka
    force: yes
    backup: yes

- name: Kafka systemd unit file
  become: yes
  template:
    src: confluent-kafka.service
    dest: /etc/systemd/system/confluent-kafka.service
    backup: yes
  register: systemd_kafka_updated

- name: Zookeeper systemd unit file
  become: yes
  template:
    src: confluent-zookeeper.service
    dest: /etc/systemd/system/confluent-zookeeper.service
    backup: yes
  register: systemd_zookeeper_updated

- name: Reload daemon files if needed
  become: yes
  systemd:
    daemon_reload: yes
  when: systemd_kafka_updated is changed or systemd_zookeeper_updated is changed or systemd_ksql is changed or systemd_kafka-rest is changed or systemd_control-center is changed or systemd_schema-registry is changed

- name: Enable Zookeeper to start on boot
  become: yes
  systemd:
    name: confluent-zookeeper
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

- name: Enable Kafka to start on boot
  become: yes
  systemd:
    name: confluent-kafka
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

- name: Enable Schema Registry to start on boot
  become: yes
  systemd:
    name: confluent-schema-registry
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

- name: Enable KSQL to start on boot
  become: yes
  systemd:
    name: confluent-ksql
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

- name: Enable Control Center to start on boot
  become: yes
  systemd:
    name: confluent-control-center
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

- name: Enable Kafka Rest to start on boot
  become: yes
  systemd:
    name: confluent-kafka-rest
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

- name: Enable Kafka Connect to start on boot
  become: yes
  systemd:
    name: confluent-kafka-connect
    enabled: yes
    masked: no
    state: started
  when: enable_kafka is defined and enable_kafka == "yes"

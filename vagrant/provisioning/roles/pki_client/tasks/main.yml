- name: install cryptography
  become: yes
  pip:
    executable: pip3
    name: cryptography

- name: see if rsa private key exists
  stat:
    path: "{{ ssl_key_rsa }}"
  register: ssl_key_rsa_stat

- name: write server private key in RSA format, for MySQL et. al. - no pass phrase
  become: yes
  command: openssl rsa -in {{ ssl_key }} -out {{ ssl_key_rsa }}
  when: not ssl_key_rsa_stat.stat.exists|bool and not ssl_key_passphrase is defined

- name: write server private key in RSA format, for MySQL et. al. - pass phrase
  become: yes
  command: openssl rsa -in {{ ssl_key }} -out {{ ssl_key_rsa }} -passin pass:'{{ ssl_key_passphrase }}'
  when: not ssl_key_rsa_stat.stat.exists|bool and ssl_key_passphrase is defined

- name: ensure secure permissions on private keys
  become: yes
  file: 
    path: "{{ item }}"
    mode: 0600
  loop:
    - "{{ ssl_key }}"
    - "{{ ssl_key_rsa }}"

- name: Java keystore and trust store
  block:
    - name: see if the Java keystore exists
      become: yes
      stat:
        path: "{{ java_key_store }}"
      register: arkcase_ks_stat
      changed_when: false
    - name: see if keys already added to the Java keystore
      become: yes
      command: keytool -v -list -keystore "{{ java_key_store }}" -storepass "{{ java_key_store_pass }}"
      when: arkcase_ks_stat.stat.exists == True
      register: key_out
      changed_when: false
    - name: write Java key store and trust store
      block:
        - name: write arkcase.p12 (used by Pentaho)
          become: yes
          command: openssl pkcs12 -export -in {{ ssl_cert }} -inkey {{ ssl_key_rsa }} -out "{{ java_p12_store }}" -name arkcase_server -chain -CAfile {{ ssl_ca }} -passout 'pass:{{ java_key_store_pass }}'
        - name: copy arkcase.p12 to key store format (PKCS12 format)
          become: yes
          command: keytool -importkeystore -deststorepass '{{ java_key_store_pass }}' -destkeypass '{{ java_key_store_pass }}' -destkeystore "{{ java_key_store }}" -deststoretype pkcs12 -srckeystore "{{ java_p12_store }}" -srcstoretype pkcs12 -srcstorepass {{ java_key_store_pass }} -alias arkcase_server -noprompt
        - name: copy arkcase.p12 to key store format (JKS format)
          become: yes
          command: keytool -importkeystore -deststorepass '{{ java_key_store_pass }}' -destkeypass '{{ java_key_store_pass }}' -destkeystore "{{ java_key_store_jks }}" -deststoretype JKS -srckeystore "{{ java_p12_store }}" -srcstoretype pkcs12 -srcstorepass '{{ java_key_store_pass }}' -alias arkcase_server -noprompt
        - name: add ArkCase certs to Java truststore
          become: yes
          java_cert:
            cert_alias: "{{ item.alias }}"
            cert_path: "{{ item.path }}"
            keystore_path: "{{ java_trust_store }}"
            keystore_pass: "{{ java_trust_store_pass }}"
            keystore_create: yes
            state: present
          loop:
            - alias: "arkcase-server"
              path: "{{ ssl_cert }}"
            - alias: "arkcase-chain"
              path: "{{ ssl_ca }}"
        - name: add JDK certs to Java trust store
          become: yes
          command: keytool -importkeystore -srckeystore /etc/pki/ca-trust/extracted/java/cacerts -srcstorepass changeit -destkeystore "{{ java_trust_store }}" -deststorepass {{ java_trust_store_pass }} -noprompt
      when: "arkcase_ks_stat.stat.exists == False"

- name: ensure shared permissions on the p12 key store
  become: yes
  file:
    path: "{{ java_p12_store }}"
    mode: 0644

- name: write encrypted symmetric key file for use in ArkCase webapp
  block:
    - name: check if symmetric key file exists
      become: yes
      stat:
        path: "{{ root_folder }}/common/symmetricKey.encrypted"
      register: sym_key_enc
      changed_when: false
    - name: write plaintext key file, this will have a new line
      become: yes
      copy:
        dest: "{{ root_folder }}/common/symmetricKeyWithNewline.txt"
        content: |
          {{ 9999999999999999999999 | random | to_uuid }}
      when: sym_key_enc.stat.exists == False
      register: plaintext_with_newline
    - name: remove the trailing new line from the symmetric key file
      become: yes
      shell: tr -d '\n' <{{ root_folder }}/common/symmetricKeyWithNewline.txt > {{ root_folder }}/common/symmetricKey.txt
      when: plaintext_with_newline is changed
      register: trim_plaintext
    - name: remove the original plaintext that had the newline
      become: yes
      file:
        path: "{{ root_folder }}/common/symmetricKeyWithNewline.txt"
        state: absent
      when: trim_plaintext is changed
    - name: extract public key from server cert
      become: yes
      command: openssl x509 -pubkey -noout -in {{ ssl_cert }} -noout
      register: pub_key
      when: sym_key_enc.stat.exists == False
      changed_when: false
    - name: write public key to file
      become: yes
      copy:
        dest: "{{ root_folder }}/common/arkcase-server.pub"
        content: |
          {{ pub_key.stdout }}
      when: sym_key_enc.stat.exists == False
    - name: write encrypted plaintext
      become: yes
      command: openssl rsautl -encrypt -pubin -inkey "{{ root_folder }}/common/arkcase-server.pub" -in "{{ root_folder }}/common/symmetricKey.txt" -out "{{ root_folder }}/common/symmetricKey.encrypted"
      when: sym_key_enc.stat.exists == False



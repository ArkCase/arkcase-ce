- name: install cryptography
  become: yes
  pip:
    executable: pip3
    name: cryptography

- name: copy primary node's private key, if necessary
  become: yes
  copy:
    dest: /etc/tls/private/arkcase-node-1.pem
    content: "{{ primary_node_private_key }}"
    mode: 0600
  when: (arkcase8_clustering | default(false))  and not (arkcase_primary_node | default(true))

- name: copy primary node's certificate, if necessary
  become: yes
  copy:
    dest: /etc/tls/crt/arkcase-node-1.crt
    content: "{{ primary_node_cert }}"
  when: (arkcase_clustering | default(false))  and not (arkcase_primary_node | default(true))

- name: write primary node's key in RSA format, if necessary
  become: yes
  command: 
    cmd: openssl rsa -in /etc/tls/private/arkcase-node-1.pem -out /etc/tls/private/arkcase-node-1-rsa.pem
    creates: /etc/tls/private/arkcase-node-1-rsa.pem
  when: (arkcase_clustering | default(false))  and not (arkcase_primary_node | default(true))


- name: write server private key in RSA format, for MySQL et. al. - no pass phrase
  become: yes
  command: 
    cmd: openssl rsa -in {{ ssl_key }} -out {{ ssl_key_rsa }}
    creates: "{{ ssl_key_rsa }}"
  when: not ssl_key_passphrase is defined

- name: write server private key in RSA format, for MySQL et. al. - pass phrase
  become: yes
  command: 
    cmd: openssl rsa -in {{ ssl_key }} -out {{ ssl_key_rsa }} -passin pass:'{{ ssl_key_passphrase }}'
    creates: "{{ ssl_key_rsa }}"
  when: ssl_key_passphrase is defined

- name: ensure secure permissions on private keys
  become: yes
  file: 
    path: "{{ item }}"
    mode: 0600
  loop:
    - "{{ ssl_key }}"
    - "{{ ssl_key_rsa }}"

- name: Java keystore and trust store (this node)
  include_tasks: write-key-store.yml
  loop:
    - key_store: "{{ java_key_store }}"
      p12_store: "{{ java_p12_store }}"
      key_store_jks: "{{ java_key_store_jks }}"
      ssl_key_rsa: "{{ ssl_key_rsa }}"
      ssl_cert: "{{ ssl_cert }}"
  when: not (arkcase_clustering | default(false)) or (arkcase_primary_node | default(true))

- name: Java keystore and trust store (from primary node, if necessary)
  include_tasks: write-key-store.yml
  loop:
    - key_store: "{{ java_key_store_node1 }}"
      p12_store: "{{ java_p12_store_node1 }}"
      key_store_jks: "{{ java_key_store_node1_jks }}"
      ssl_key_rsa: /etc/tls/private/arkcase-node-1-rsa.pem
      ssl_cert: /etc/tls/crt/arkcase-node-1.crt
  when: (arkcase_clustering | default(false)) and not (arkcase_primary_node | default(true))

- name: add ArkCase certs to Java truststore
  become: yes
  java_cert:
    cert_alias: "{{ item.alias }}"
    cert_path: "{{ item.path }}"
    keystore_path: "{{ java_trust_store }}"
    keystore_pass: "{{ java_trust_store_pass }}"
    keystore_create: yes
    state: present
  loop:
    - alias: "arkcase-server"
      path: "{{ ssl_cert }}"
    - alias: "arkcase-chain"
      path: "{{ ssl_ca }}"

- name: add JDK certs to Java trust store
  become: yes
  command: keytool -importkeystore -srckeystore /etc/pki/ca-trust/extracted/java/cacerts -srcstorepass changeit -destkeystore "{{ java_trust_store }}" -deststorepass {{ java_trust_store_pass }} -noprompt
  when: "arkcase_ks_stat.stat.exists == False"

- name: set symmetric key facts - subsequent ArkCase nodes
  set_fact:
    symmetric_key_plaintext: "{{ primary_node_symmetric_key_plaintext }}"
    ssl_cert_for_symmetric_key: /etc/tls/crt/arkcase-node-1.crt
  when: (arkcase_clustering | default(false)) and not (arkcase_primary_node | default(true))

- name: set symmetric key facts - primary or only ArkCase node
  set_fact:
    symmetric_key_plaintext: "{{ 9999999999999999999999 | random | to_uuid }}"
    ssl_cert_for_symmetric_key: "{{ ssl_cert }}"
  when: not (arkcase_clustering | default(false)) or (arkcase_primary_node | default(true))

- name: write encrypted symmetric key file for use in ArkCase webapp
  block:
    - name: check if symmetric key file exists
      become: yes
      stat:
        path: "{{ root_folder }}/common/symmetricKey.encrypted"
      register: sym_key_enc
      changed_when: false
    - name: write plaintext key file, this will have a new line
      become: yes
      copy:
        dest: "{{ root_folder }}/common/symmetricKeyWithNewline.txt"
        content: "{{ symmetric_key_plaintext }}"
      when: sym_key_enc.stat.exists == False
      register: plaintext_with_newline
    - name: remove the trailing new line from the symmetric key file
      become: yes
      shell: tr -d '\n' <{{ root_folder }}/common/symmetricKeyWithNewline.txt > {{ root_folder }}/common/symmetricKey.txt
      when: plaintext_with_newline is changed
      register: trim_plaintext
    - name: remove the original plaintext that had the newline
      become: yes
      file:
        path: "{{ root_folder }}/common/symmetricKeyWithNewline.txt"
        state: absent
      when: trim_plaintext is changed
    - name: extract public key from server cert
      become: yes
      command: openssl x509 -pubkey -noout -in {{ ssl_cert_for_symmetric_key }} 
      register: pub_key
      when: sym_key_enc.stat.exists == False
      changed_when: false
    - name: write public key to file
      become: yes
      copy:
        dest: "{{ root_folder }}/common/arkcase-server-for-symmetric-key.pub"
        content: |
          {{ pub_key.stdout }}
      when: sym_key_enc.stat.exists == False
    - name: write encrypted plaintext
      become: yes
      command: openssl rsautl -encrypt -pubin -inkey "{{ root_folder }}/common/arkcase-server-for-symmetric-key.pub" -in "{{ root_folder }}/common/symmetricKey.txt" -out "{{ root_folder }}/common/symmetricKey.encrypted"
      when: sym_key_enc.stat.exists == False



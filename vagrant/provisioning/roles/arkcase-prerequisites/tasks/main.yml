- name: arkcase user
  become: yes
  user:
    name: arkcase
    shell: /bin/false
    state: present
    create_home: yes
    home: /home/arkcase

- name: set path to arkcase data folder
  set_fact:
    data_folder: "{{ arkcase_data_folder | default(root_folder + '/data/arkcase-home') }}"

- name: arkcase folders
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    group: arkcase
    owner: arkcase
  loop:
    - "{{ root_folder }}/data/arkcase"
    - "{{ data_folder }}"
    - "{{ data_folder }}/.arkcase"
    - "{{ data_folder }}/.yarn"
    - "{{ data_folder }}/.cache"
    - "{{ root_folder }}/log/arkcase"
    - "{{ root_folder }}/app/arkcase"
    - "{{ root_folder }}/install/arkcase"
    - "{{ root_folder }}/tmp/arkcase"
    - "{{ root_folder }}/app/config-server"
    - "{{ root_folder }}/log/config-server"
    - "{{ root_folder }}/tmp/config-server"
    - "{{ root_folder }}/data/config-server/tmp"
  register: arkcase_folder_structure

- name: link data folder to root folder if necessary
  become: yes
  file:
    group: arkcase
    owner: arkcase
    src: "{{ data_folder }}"
    dest: "{{ root_folder }}/data/arkcase-home"
    state: link
  when: data_folder != root_folder + "/data/arkcase-home"

- name: link folders if they don't already exist
  include_tasks: link_folder.yml
  loop:
    - ".yarn"
    - ".cache"
    - ".arkcase"

- name: Run CRON job every day at 1.05 to remove fileserver older than 7 days
  become: yes
  cron:
    name: "remove_files"
    user: "root"
    hour: "1"
    minute: "5"
    job: 'find {{ data_folder }}/fileserver -mtime +6 -type f -exec rm {} \;'

- name: enable logrotate for arkcase log folder if necessary
  include_tasks: "{{ role_path }}/../common/tasks/logrotate.yml"
  loop:
    - arkcase
    - config-server

- name: set flag for local db, if local
  set_fact:
    schema_task_name: create_schema
  when: not rds_password is defined

- name: set flag for RDS, if RDS
  set_fact:
    schema_task_name: create_schema_rds
  when: rds_password is defined

# - name: create arkcase database schema
#   include_tasks: "{{ role_path }}/../mariadb/tasks/{{ schema_task_name }}.yml"
#   args:
#     apply:
#       vars:
#         item: arkcase

- name: get yarn repository definition
  include_tasks: "{{ role_path }}/../common/tasks/download.yml"
  loop:
    - name: Yarn repository
      dest: /etc/yum.repos.d/yarn.repo
      owner: root
      url: https://dl.yarnpkg.com/rpm/yarn.repo

- name: required packages to run ArkCase webapp
  become: yes
  yum:
    state: present
    name:
      - yarn
      - npm
      - nodejs
    
- include_tasks: "{{ role_path }}/../tomcat/tasks/main.yml"
  args:
    apply:
      vars:
        tc:
          service: arkcase
          user: arkcase
          tomcat_home: "{{ root_folder }}/app/arkcase"
          tls_port: 8843
          shutdown_port: 4005
          jmx_remote_port: 40506
          jmx_rmi_port: 40507
          http_port: 8080
          redirect_port: 4443
          ajp_port: 4009
          catalina_out: "{{ root_folder }}/log/arkcase/catalina.out"
          catalina_temp: "{{ root_folder }}/tmp/arkcase"
          log_folder: "{{ root_folder }}/log/arkcase"
          java_home: "/usr/lib/jvm/java-1.8.0-openjdk"
  register: tomcat_unarchived

- name: add options to JAVA_OPTS
  become: yes
  become_user: arkcase
  blockinfile:
    path: "{{ root_folder }}/app/arkcase/bin/setenv.sh"
    insertbefore: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK - CONFIG-SERVER JAVA_OPTS"
    block: |
      export JAVA_OPTS="$JAVA_OPTS -Dacm.configurationserver.propertyfile=/home/arkcase/.arkcase/acm/conf.yml -Duser.home={{ data_folder }}"


- name: configure NodeJS minification
  become: yes
  become_user: arkcase
  blockinfile:
    path: "{{ root_folder }}/app/arkcase/bin/setenv.sh"
    insertbefore: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK - NODE_ENV"
    block: |
      # set Node.js production profile to minify JavaScript and CSS
      #export NODE_ENV=development
      export NODE_ENV=production

- name: configure temp environment
  become: yes
  become_user: arkcase
  blockinfile:
    path: "{{ root_folder }}/app/arkcase/bin/setenv.sh"
    insertbefore: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK - TEMP ENV"
    block: |
      export TEMP={{ root_folder }}/tmp/arkcase
      export TMP={{ root_folder }}/tmp/arkcase

- name: write encrypted symmetric key file for use in ArkCase webapp
  block:
    - name: check if symmetric key file exists
      become: yes
      stat:
        path: "{{ root_folder }}/common/symmetricKey.encrypted"
      register: sym_key_enc
      changed_when: false
    - name: write plaintext key file, this will have a new line
      become: yes
      copy:
        dest: "{{ root_folder }}/common/symmetricKeyWithNewline.txt"
        content: |
          {{ 9999999999999999999999 | random | to_uuid }}
      when: sym_key_enc.stat.exists == False
      register: plaintext_with_newline
    - name: remove the trailing new line from the symmetric key file
      become: yes
      shell: tr -d '\n' <{{ root_folder }}/common/symmetricKeyWithNewline.txt > {{ root_folder }}/common/symmetricKey.txt
      when: plaintext_with_newline is changed
      register: trim_plaintext
    - name: remove the original plaintext that had the newline
      become: yes
      file:
        path: "{{ root_folder }}/common/symmetricKeyWithNewline.txt"
        state: absent
      when: trim_plaintext is changed
    - name: extract public key from server cert
      become: yes
      command: openssl x509 -pubkey -noout -in {{ ssl_cert }} -noout
      register: pub_key
      when: sym_key_enc.stat.exists == False
      changed_when: false
    - name: write public key to file
      become: yes
      copy:
        dest: "{{ root_folder }}/common/arkcase-server.pub"
        content: |
          {{ pub_key.stdout }}
      when: sym_key_enc.stat.exists == False
    - name: write encrypted plaintext
      become: yes
      command: openssl rsautl -encrypt -pubin -inkey "{{ root_folder }}/common/arkcase-server.pub" -in "{{ root_folder }}/common/symmetricKey.txt" -out "{{ root_folder }}/common/symmetricKey.encrypted"
      when: sym_key_enc.stat.exists == False
      
- name: configure external web portal logging file
  become: yes
  become_user: arkcase
  blockinfile:
    path: "{{ root_folder }}/app/arkcase/bin/setenv.sh"
    insertbefore: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK - EXTERNAL-PORTAL LOGGING"
    block: |
      export LOG_FILE={{ root_folder }}/log/arkcase/externalPortal.log

- name: pentaho user
  become: yes
  user:
    name: pentaho
    shell: /bin/false
    state: present
    create_home: yes
    home: /home/pentaho

- name: Pentaho folders
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    group: pentaho
    owner: pentaho
  loop:
    - "{{ root_folder }}/data/pentaho"
    - "{{ root_folder }}/log/pentaho"
    - "{{ root_folder }}/app/pentaho"
    - "{{ root_folder }}/install/pentaho"
    - "{{ root_folder }}/tmp/pentaho"
  register: pentaho_folder_structure

- name: enable logrotate for pentaho log folder if necessary
  include_tasks: "{{ role_path }}/../common/tasks/logrotate.yml"
  args:
    apply:
      vars:
        item: pentaho

- name: create Pentaho database schemas
  include_tasks: "{{ role_path }}/../pentaho/tasks/create_database_schemas.yml"

- name: download Pentaho EE artifacts
  become: yes
  become_user: pentaho
  maven_artifact:
    repository_url: "{{ maven_repository_release }}"
    group_id: "pentaho-ee"
    artifact_id: "{{ item }}"
    version: "{{ pentaho_ee_version }}"
    extension: "zip"
    dest: "{{ root_folder }}/install/pentaho/{{ item }}.zip"
  loop:
    - paz-plugin-ee
    - pdd-plugin-ee
    - pir-plugin-ee
    - pentaho-server-ee

- name: create temp install folders
  become: yes
  become_user: pentaho
  file:
    path: "{{ root_folder }}/tmp/pentaho/{{ item }}"
    state: directory
  loop:
    - paz-plugin-ee
    - pdd-plugin-ee
    - pir-plugin-ee
    - pentaho-server-ee

- name: unzip artifacts
  become: yes
  become_user: pentaho
  command: unzip -j -d "{{ root_folder }}/tmp/pentaho/{{ item }}" "{{ root_folder }}/install/pentaho/{{ item }}.zip"
  args:
    creates: "{{ root_folder }}/tmp/pentaho/{{ item }}/license.txt"
  loop:
    - paz-plugin-ee
    - pdd-plugin-ee
    - pir-plugin-ee
    - pentaho-server-ee

- name: install artifacts
  become: yes
  become_user: pentaho
  shell: echo -e "{{ item.installer_response }}" | java -jar {{ root_folder }}/tmp/pentaho/{{ item.name }}/installer.jar -console
  args: 
    creates: "{{ item.creates }}"
  loop:
    - name: pentaho-server-ee
      creates: "{{ root_folder }}/app/pentaho/pentaho-server/import-export.sh"
      installer_response: "               1\n{{ root_folder }}/app/pentaho\n1"
    - name: paz-plugin-ee
      creates: "{{ root_folder }}/app/pentaho/analyzer/analyzer.properties"
      installer_response: "               1\n{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system\n1"
    - name: pdd-plugin-ee
      creates: "{{ root_folder }}/app/pentaho/dashboards/plugin.xml"
      installer_response: "               1\n{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system\nY\n1"
    - name: pir-plugin-ee
      creates: "{{ root_folder }}/app/pentaho/pentaho-interactive-reporting/plugin.xml"
      installer_response: "               1\n{{ root_folder }}/pentaho-server/pentaho-solutions/system\nY\n1"
  
- name: link MariaDB jar file
  become: yes
  become_user: pentaho
  file:
    src: "{{ root_folder }}/common/mariadb-java-client-{{ mariadb_jdbc_version }}.jar"
    dest: "{{ root_folder}}/app/pentaho/pentaho-server/tomcat/lib/mariadb-java-client-{{ mariadb_jdbc_version }}.jar"
    state: link

- name: LDAP application context
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: "{{ role_path }}/../pentaho/templates/applicationContext-security-ldap.properties"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/"
    - src: "{{ role_path }}/../pentaho/templates/repository.spring.properties"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/"

- name: import arkcase keystore
  become: yes
  become_user: pentaho
  java_cert:
    pkcs12_alias: arkcase_client
    pkcs12_path: "{{ root_folder }}/common/arkcase-client.p12"
    pkcs12_password: "{{ java_key_store_pass }}"
    keystore_create: yes
    keystore_pass: password
    keystore_path: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/conf/keystore"
    state: present
    cert_alias: tomcat

- name: jmx config files
  become: yes
  become_user: pentaho
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    backup: yes
  loop:
    - src: "{{ role_path }}/../pentaho/files/access.file"
      mode: "0644"
      dest: "{{ root_folder }}/app/pentaho"
    - src: "{{ role_path }}/../pentaho/files/password.file"
      mode: "0600"
      dest: "{{ root_folder }}/app/pentaho"

- name: tomcat config files
  become: yes
  become_user: pentaho
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    backup: yes
  loop:
    - src: "{{ role_path }}/../pentaho/templates/setenv.sh"
      mode: "u+x"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/bin"
    - src: "{{ role_path }}/../pentaho/templates/server.xml"
      mode: "0644"
      dest: "{{ root_folder}}/app/pentaho/pentaho-server/tomcat/conf"

- name: read current import-export script
  become: yes
  become_user: pentaho
  command: cat {{ root_folder }}/app/pentaho/pentaho-server/import-export.sh
  register: import_export
  changed_when: false
  
- name: set TLS options in import-export script
  become: yes
  become_user: pentaho
  replace:
    path: "{{ root_folder }}/app/pentaho/pentaho-server/import-export.sh"
    regexp: "-Xmx2048m"
    replace: "-Djavax.net.ssl.keyStorePassword={{ java_key_store_pass }} -Djavax.net.ssl.trustStorePassword={{ java_trust_store_pass }} -Djavax.net.ssl.keyStore={{ java_key_store }} -Djavax.net.ssl.trustStore={{ java_trust_store}} -Xmx2048m"
  when: "'Djavax.net.ssl.keyStorePassword' not in import_export.stdout"

- name: configure Tomcat log file locations
  become: yes
  become_user: pentaho
  replace:
    path: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/conf/logging.properties"
    backup: yes
    regexp: '\$\{catalina\.base\}\/logs'
    replace: "{{ root_folder }}/log/pentaho"

- name: configure Pentaho log file locations
  become: yes
  become_user: pentaho
  replace:
    path: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/webapps/pentaho/WEB-INF/classes/log4j.xml"
    backup: yes
    regexp: '\.\.\/logs\/'
    replace: "{{ root_folder }}/log/pentaho/"

- name: pentaho logrotate
  become: yes
  template:
    src: "{{ role_path }}/../pentaho/templates/pentaho"
    dest: /etc/logrotate.d/pentaho

- name: database configuration templates
  become: yes
  become_user: pentaho
  template:
    backup: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: "{{ role_path }}/../pentaho/templates/repository.xml"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/jackrabbit/repository.xml"
    - src: context.xml
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/webapps/pentaho/META-INF/context.xml"
    - src: mysql5.hibernate.cfg.xml
      dest: "{{ root_folder}}/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/mysql5.hibernate.cfg.xml"

- name: database configuration files
  become: yes
  become_user: pentaho
  copy:
    backup: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: "{{ role_path }}/../pentaho/files/quartz.properties"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/quartz/"
    - src: "{{ role_path }}/../pentaho/files/hibernate-settings.xml"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/"
    - src: "{{ role_path }}/../pentaho/files/activemq.xml"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/karaf/etc/"

- name: copy audit_sql.xml (local file)
  become: yes
  become_user: pentaho
  copy:
    backup: yes
    remote_src: yes
    src: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/dialects/mysql5/audit_sql.xml"
    dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/audit_sql.xml"

- name: add resource-refs to web.xml
  become: yes
  become_user: pentaho
  blockinfile:
    backup: yes
    path: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/webapps/pentaho/WEB-INF/web.xml"
    insertafter: "insert additional resource-refs"
    marker: "<!-- {mark} ANSIBLE MANAGED RESOURCE REFS -->"
    content: |
      <resource-ref>
        <description>acm3DataSource</description>
        <res-ref-name>jdbc/acm3DataSource</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
      </resource-ref>

- name: preauthentication setup
  become: yes
  become_user: pentaho
  copy:
    backup: yes
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - src: "{{ role_path }}/../pentaho/files/arkcase-preauth-springsec-v4-1.1.1-bundled.jar"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/tomcat/webapps/pentaho/WEB-INF/lib/"
    - src: "{{ role_path }}/../pentaho/files/applicationContext-spring-security.xml"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/"
    - src: "{{ role_path }}/../pentaho/files/arkcase-preauth.xml"
      dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/"

- name: server properties
  become: yes
  become_user: pentaho
  template:
    backup: yes
    src: server.properties
    dest: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/server.properties"

# Pentaho needs to start once with the default jackrabbit-based security (not with LDAP); this initial startup will create tenant0. After that, change the security provider to ldap restart
- name: Pentaho systemd unit file
  become: yes
  template:
    src: "{{ role_path }}/../pentaho/templates/pentaho.service"
    dest: /etc/systemd/system/pentaho.service
  register: pentaho_systemd

- name: reload daemon-files if needed
  become: yes
  command: systemctl daemon-reload
  when: pentaho_systemd is changed
  
- name: enable Pentaho to start on boot
  become: yes
  systemd:
    name: pentaho
    enabled: yes
    masked: no

- name: start Pentaho, if not already started
  become: yes
  systemd:
    name: pentaho
    state: started

- name: wait for Pentaho to start
  wait_for:
    port: 2002
    delay: 5
    timeout: 300

- name: ensure ldap security is being used
  become: yes
  become_user: pentaho
  replace:
    backup: yes
    path: "{{ root_folder }}/app/pentaho/pentaho-server/pentaho-solutions/system/security.properties"
    regexp: jackrabbit
    replace: ldap
  register: security_provider_updated

- name: restart pentaho, if needed
  become: yes
  systemd:
    name: pentaho
    state: restarted
  when: security_provider_updated is changed
  
- name: wait for pentaho to come back, if it was restarted
  wait_for:
    port: 2002
    delay: 5
    timeout: 300
  when: security_provider_updated is changed

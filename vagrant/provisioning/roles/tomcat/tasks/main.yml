- name: Install Tomcat for {{ tc.service }}
  block:
    - name: install prerequisites to build native library
      become: yes
      yum:
        state: present
        name: 
          - "@Development Tools"
          - openssl-devel
          - apr-devel
    - name: see if Tomcat already installed
      become: yes
      stat:
        path: "{{ tc.tomcat_home }}"
      register: current_install
    - name: detect current version, if already installed
      become: yes
      shell: "{{ tc.tomcat_home }}/bin/version.sh | grep 'Server version' | awk -F/ '{ print $2 }'"
      register: current_version
      when: current_install.stat.exists
    - name: move current version to backup location, if different from desired version
      become: yes
      shell: mv {{ tc.tomcat_home }} {{ tc.tomcat_home }}-{{ current_version.stdout }}
      when: current_install.stat.exists and ( tomcat_version != current_version.stdout )
    - name: zip/archive the backup location, if needed
      become: yes
      shell: zip -rm {{ tc.tomcat_home }}-{{ current_version.stdout }}.zip {{ tc.tomcat_home }}-{{ current_version.stdout }}
      when: current_install.stat.exists and ( tomcat_version != current_version.stdout )
    - name: make new tomcat home folder, if new version is an upgrade
      become: yes
      file:
        path: "{{ tc.tomcat_home }}"
        state: directory
        group: "{{ tc.user }}"
        owner: "{{ tc.user }}"
        mode: 0755
      when: current_install.stat.exists and ( tomcat_version != current_version.stdout )
    - include_tasks: "{{ role_path }}/../common/tasks/download.yml"
      loop:
        - name: Tomcat
          dest: "{{ root_folder }}/common/apache-tomcat-{{ tomcat_version }}.tar.gz"
          owner: root
          url: https://archive.apache.org/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz
    - name: unarchive {{ tc.service }} Tomcat
      become: yes
      become_user: "{{ tc.user }}"
      unarchive:
        src: "{{ root_folder }}/common/apache-tomcat-{{ tomcat_version }}.tar.gz"
        remote_src: yes
        dest: "{{ tc.tomcat_home }}"
        extra_opts:
          - --strip-components=1
        creates: "{{ tc.tomcat_home }}/README.md"
    - name: copy private key for {{ tc.service }}
      become: yes
      copy: 
        remote_src: yes
        src: "{{ ssl_key }}"
        dest: "{{ tc.tomcat_home }}/conf/{{ tc.user }}.key"
        owner: "{{ tc.user }}"
        group: "{{ tc.user }}"
        mode: 0600
    - name: create folder for native library build
      become: yes
      become_user: "{{ tc.user }}"
      file:
        path: "{{ tc.tomcat_home }}/bin/native"
        state: directory
    - name: unarchive Tomcat native library
      become: yes
      become_user: "{{ tc.user }}"
      unarchive:
        src: "{{ tc.tomcat_home }}/bin/tomcat-native.tar.gz"
        remote_src: yes
        dest: "{{ tc.tomcat_home }}/bin/native"
        extra_opts:
          - --strip-components=1
        creates: "{{ tc.tomcat_home }}/bin/native/README.txt"
    - name: build Tomcat native library
      become: yes
      become_user: "{{ tc.user }}"
      shell: ./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/usr/lib/jvm/java --with-ssl=yes --prefix={{ tc.tomcat_home }}
      args:
        chdir: "{{ tc.tomcat_home }}/bin/native/native"
        creates: "{{ tc.tomcat_home }}/bin/native/native/config.log"
    - name: make
      become: yes
      become_user: "{{ tc.user }}"
      command: make
      args:
        chdir: "{{ tc.tomcat_home }}/bin/native/native"
        creates: "{{ tc.tomcat_home }}/bin/native/native/.libs/libtcnative-1.so"
    - name: make install
      become: yes
      become_user: "{{ tc.user }}"
      command: make install
      args:
        chdir: "{{ tc.tomcat_home }}/bin/native/native"
        creates: "{{ tc.tomcat_home }}/lib/libtcnative-1.so"
    - name: add native lib folder to LD_LIB_PATH
      become: yes
      become_user: "{{ tc.user }}"
      copy:
        dest: "{{ tc.tomcat_home }}/bin/setenv.sh"
        mode: u+x
        force: no
        content: |
          #!/bin/sh
          LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CATALINA_HOME/lib{{ ":" + tc.extra_lib_path if tc.extra_lib_path is defined else "" }}
          export LD_LIBRARY_PATH
    - name: web.xml security changes - filter mappings
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/conf/web.xml"
        backup: yes
        insertbefore: "<!-- The mapping for the Set Character Encoding Filter -->"
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - SECURITY UPDATES - FILTER MAPPINGS -->"
        block: |
          <filter-mapping>
            <filter-name>httpHeaderSecurity</filter-name>
            <url-pattern>/*</url-pattern>
            <dispatcher>REQUEST</dispatcher>
          </filter-mapping>
          <filter-mapping>
            <filter-name>ExpiresFilter</filter-name>
            <url-pattern>/*</url-pattern>
            <dispatcher>REQUEST</dispatcher>
          </filter-mapping>
    - name: web.xml security changes - filters
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/conf/web.xml"
        backup: yes
        insertbefore: "  <!-- A filter that sets character encoding that is used to decode -->"
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - SECURITY UPDATES - FILTERS -->"
        block: |
          <filter>
            <filter-name>httpHeaderSecurity</filter-name>
            <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>
            <async-supported>true</async-supported>
            <init-param>
              <param-name>hstsEnabled</param-name>
              <param-value>true</param-value>
            </init-param>
            <init-param>
              <param-name>hstsMaxAgeSeconds</param-name>
              <param-value>31536000</param-value>
            </init-param>
            <init-param>
              <param-name>hstsIncludeSubDomains</param-name>
              <param-value>true</param-value>
            </init-param>
          </filter>
          <filter>
            <filter-name>ExpiresFilter</filter-name>
            <filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>
            <init-param>
              <param-name>ExpiresDefault</param-name>
              <param-value>access plus 0 seconds</param-value>
            </init-param>
            <init-param>
              <param-name>ExpiresByType image</param-name>
              <param-value>access plus 60 minutes</param-value>
            </init-param>
            <init-param>
              <param-name>ExpiresByType text/css</param-name>
              <param-value>access plus 60 minutes</param-value>
            </init-param>
            <init-param>
              <param-name>ExpiresByType text/html</param-name>
              <param-value>access plus 60 minutes</param-value>
            </init-param>
            <init-param>
              <param-name>ExpiresByType application/javascript</param-name>
              <param-value>access plus 60 minutes</param-value>
            </init-param>
          </filter>

    - name: configure Tomcat to use native connector
      become: yes
      become_user: "{{ tc.user }}"
      replace:
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        backup: yes
        regexp: '(^.*)AprLifecycleListener" SSLEngine(.*$)'
        replace: '\1AprLifecycleListener" useAprConnector="true" SSLEngine\2'
    - name: configure error report valve - 2023-07-02 security updates
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        backup: yes
        insertbefore: '<!-- Access log processes all example.'
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - ERROR REPORT VALVE -->"
        block: |
          <!-- Error Report Valve -->
          <Valve className="org.apache.catalina.valves.ErrorReportValve" showReport="false" showServerInfo="false"/>
    - name: configure RemoteIP logging valve, to log the browser IP address in the access log
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        backup: yes
        insertbefore: '<!-- Access log processes all example.'
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - REMOTE IP VALVE -->"
        block: |
          <!-- Remote IP Valve -->
          <Valve className="org.apache.catalina.valves.RemoteIpValve" />
    - name: enable request attribute logging
      become: yes
      become_user: "{{ tc.user }}"
      replace:
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        backup: yes
        regexp: '<Valve className="org.apache.catalina.valves.AccessLogValve" directory'
        replace: '<Valve className="org.apache.catalina.valves.AccessLogValve" requestAttributesEnabled="true" directory'
    - name: configure access log file location
      become: yes
      become_user: "{{ tc.user }}"
      replace:
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        backup: yes
        regexp: 'directory="logs"'
        replace: 'directory="{{ tc.log_folder }}"'
    - name: configure other Tomcat log file locations
      become: yes
      become_user: "{{ tc.user }}"
      replace:
        path: "{{ tc.tomcat_home }}/conf/logging.properties"
        backup: yes
        regexp: '\$\{catalina\.base\}\/logs'
        replace: "{{ tc.log_folder }}"
    - name: set TLS options in server.xml
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        insertbefore: '^.*</Service>.*$'
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - TLS CONFIG -->"
        block: |
          <!-- {{ tc.service}} Connector -->
          <Connector 
            port="{{ tc.tls_port }}"
            maxThreads="150" 
            SSLEnabled="true" 
            secure="true" 
            scheme="https"
            address="0.0.0.0"
            maxHttpHeaderSize="32768"
            connectionTimeout="40000"
            useBodyEncodingForURI="true">
            protocol="org.apache.coyote.http11.Http11AprProtocol">
            <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
            <SSLHostConfig 
              honorCipherOrder="true"
              ciphers="HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!kRSA"
              caCertificateFile="{{ ssl_ca }}"
              protocols="{{ ssl_version }}">
              <Certificate 
                certificateFile="{{ ssl_cert }}"
                certificateKeyFile="{{ tc.tomcat_home }}/conf/{{ tc.user }}.key" />
            </SSLHostConfig>
          </Connector>
    - name: JMX password file
      become: yes
      become_user: "{{ tc.user }}"
      copy:
        dest: "{{ tc.tomcat_home }}/password.file"
        content: |
          monitorRole {{ jmx_password }}
          controlRole {{ jmx_password }}
        mode: 0600
    - name: JMX access file
      become: yes
      become_user: "{{ tc.user }}"
      copy:
        dest: "{{ tc.tomcat_home }}/access.file"
        content: |
          monitorRole readonly
          controlRole readwrite
        mode: 0644
    - name: set JAVA_HOME
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/bin/setenv.sh"
        create: yes
        mode: u+x
        insertbefore: EOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK - JAVA_HOME"
        block: |
          export JAVA_HOME="{{ tc.java_home }}"
    - name: set JAVA_OPTS
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/bin/setenv.sh"
        create: yes
        mode: u+x
        insertbefore: EOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK - JAVA_OPTS"
        block: |
          export JAVA_OPTS="-Xms{{ tc.mem_min | default('1g',true)}} -Xmx{{ tc.mem_max | default('6g',true)}} -Djava.net.preferIPv4Stack=true -XX:+UseG1GC -Dlog4j.formatMsgNoLookups=true {{ tc.fips_mode | default('') }} -Dspring.cloud.config.uri=https://{{ arkcase_host }}:9999"
    - name: set CATALINA_OPTS
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/bin/setenv.sh"
        create: yes
        mode: u+x
        insertbefore: EOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK - CATALINA_OPTS"
        block: |
          export CATALINA_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port={{ tc.jmx_remote_port }} -Dcom.sun.management.jmxremote.rmi.port={{ tc.jmx_rmi_port }} -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname={{ internal_host }} -Dcom.sun.management.jmxremote.password.file={{ tc.tomcat_home }}/password.file -Dcom.sun.management.jmxremote.access.file={{ tc.tomcat_home }}/access.file"
    - name: set other environment variables
      become: yes
      become_user: "{{ tc.user }}"
      blockinfile:
        path: "{{ tc.tomcat_home }}/bin/setenv.sh"
        create: yes
        mode: u+x
        insertbefore: EOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK - ENV VARS"
        block: |
          export CATALINA_OUT="{{ tc.catalina_out }}"
          export CATALINA_PID="{{ tc.catalina_temp }}/catalina.pid"
          export CATALINA_TMPDIR="{{ tc.catalina_temp }}"
          
    - name: ensure unique ports
      become: yes
      become_user: "{{ tc.user }}"
      replace:
        backup: yes
        path: "{{ tc.tomcat_home }}/conf/server.xml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - regexp: 'Server port="8005" shutdown="SHUTDOWN"'
          replace: 'Server port="{{ tc.shutdown_port }}" shutdown="SHUTDOWN"'
        - regexp: 'Connector port="8080" protocol="HTTP/1.1"'
          replace: 'Connector port="{{ tc.http_port }}" shutdown="SHUTDOWN"'
        - regexp: 'redirectPort="8443"'
          replace: 'redirectPort="{{ tc.redirect_port }}"'
        - regexp: 'Connector port="8009" protocol="AJP/1.3"'
          replace: 'Connector port="{{ tc.ajp_port }}" protocol="AJP/1.3"'
    - name: set Tomcat startup SELinux context
      become: yes
      file:
        path: "{{ item }}"
        setype: bin_t
      loop:
        - "{{ tc.tomcat_home }}/bin/startup.sh"
        - "{{ tc.tomcat_home }}/bin/shutdown.sh"

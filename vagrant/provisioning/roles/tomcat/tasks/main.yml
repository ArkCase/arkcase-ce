- name: Install Tomcat for {{ item.service }}
  block:
    - name: install prerequisites to build native library
      become: yes
      yum:
        state: present
        name: 
          - "@Development Tools"
          - openssl-devel
          - apr-devel
    - include_tasks: "{{ role_path }}/../common/tasks/download.yml"
      loop:
        - name: Tomcat
          dest: /opt/common/apache-tomcat-{{ tomcat_version }}.tar.gz
          owner: root
          url: https://www-us.apache.org/dist/tomcat/tomcat-{{ tomcat_major_version }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz
    - name: unarchive {{ item.service }} Tomcat
      become: yes
      become_user: "{{ item.user }}"
      unarchive:
        src: /opt/common/apache-tomcat-{{ tomcat_version }}.tar.gz
        remote_src: yes
        dest: "{{ item.tomcat_home }}"
        extra_opts:
          - --strip-components=1
        creates: "{{ item.tomcat_home }}/README.md"
    - name: create folder for native library build
      become: yes
      become_user: "{{ item.user }}"
      file:
        path: "{{ item.tomcat_home }}/bin/native"
        state: directory
    - name: unarchive Tomcat native library
      become: yes
      become_user: "{{ item.user }}"
      unarchive:
        src: "{{ item.tomcat_home }}/bin/tomcat-native.tar.gz"
        remote_src: yes
        dest: "{{ item.tomcat_home }}/bin/native"
        extra_opts:
          - --strip-components=1
        creates: "{{ item.tomcat_home }}/bin/native/README.txt"
    - name: build Tomcat native library
      become: yes
      become_user: "{{ item.user }}"
      shell: ./configure --with-apr=/usr/bin/apr-1-config --with-java-home=/usr/lib/jvm/java --with-ssl=yes --prefix={{ item.tomcat_home }}
      args:
        chdir: "{{ item.tomcat_home }}/bin/native/native"
        creates: "{{ item.tomcat_home }}/bin/native/native/config.log"
    - name: make
      become: yes
      become_user: "{{ item.user }}"
      command: make
      args:
        chdir: "{{ item.tomcat_home }}/bin/native/native"
        creates: "{{ item.tomcat_home }}/bin/native/native/.libs/libtcnative-1.so"
    - name: make install
      become: yes
      become_user: "{{ item.user }}"
      command: make install
      args:
        chdir: "{{ item.tomcat_home }}/bin/native/native"
        creates: "{{ item.tomcat_home }}/lib/libtcnative-1.so"
    - name: add native lib folder to LD_LIB_PATH
      become: yes
      become_user: "{{ item.user }}"
      copy:
        dest: "{{ item.tomcat_home }}/bin/setenv.sh"
        mode: u+x
        force: no
        content: |
          #!/bin/sh
          LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CATALINA_HOME/lib
          export LD_LIBRARY_PATH
    - name: configure Tomcat to use native connector
      become: yes
      become_user: "{{ item.user }}"
      replace:
        path: "{{ item.tomcat_home }}/conf/server.xml"
        backup: yes
        regexp: '(^.*)AprLifecycleListener" SSLEngine(.*$)'
        replace: '\1AprLifecycleListener" useAprConnector="true" SSLEngine\2'
#    - name: copy TLS files to Tomcat conf folder
#      become: yes
#      become_user: "{{ item.user }}"
#      copy:
#        src: "{{ tls.src }}"
#        dest: "{{ tls.dest }}"
#        mode: 0600
#      loop:
#        - src: /etc/ssl/ca/acm-arkcase-client.cert.pem
#          dest: "{{ item.tomcat_home }}/conf/acm-arkcase-client.cert.pem"
#        - src: /etc/ssl/private/acm-arkcase-client.rsa.pem
#          dest: "{{ item.tomcat_home }}/conf/acm-arkcase-client.rsa.pem"
#        - src: /etc/ssl/ca/arkcase-ca.crt
#          dest: "{{ item.tomcat_home }}/conf/arkcase-ca.crt"
#      loop_control:
#        loop_var: tls
    - name: set TLS options in server.xml
      become: yes
      become_user: "{{ item.user }}"
      blockinfile:
        path: "{{ item.tomcat_home }}/conf/server.xml"
        insertbefore: '^.*</Service>.*$'
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - TLS CONFIG -->"
        block: |
          <!-- {{ item.service}} Connector -->
          <Connector port="{{ item.tls_port }}"
            maxThreads="150" SSLEnabled="true" secure="true" scheme="https"
            maxHttpHeaderSize="32768"
            connectionTimeout="40000"
            useBodyEncodingForURI="true"
            address="0.0.0.0">
            <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
            <SSLHostConfig protocols="TLSv1.2" certificateVerification="none">
              <Certificate certificateFile="/etc/ssl/ca/acm-arkcase-client.cert.pem"
                certificateKeyFile="/etc/ssl/private/acm-arkcase-client.rsa.pem"
                certificateChainFile="/etc/ssl/ca/arkcase-ca.crt"
                type="RSA" />
            </SSLHostConfig>
          </Connector>
    - name: set JAVA_OPTS
      become: yes
      become_user: "{{ item.user }}"
      blockinfile:
        path: "{{ item.tomcat_home }}/bin/setenv.sh"
        create: yes
        mode: u+x
        insertbefore: EOF
        marker: "# {mark} ANSIBLE MANAGED BLOCK - JAVA_OPTS"
        block: |
          export JAVA_OPTS="-Djava.net.preferIPv4Stack=true -Djavax.net.ssl.keyStorePassword=password -Djavax.net.ssl.trustStorePassword=password -Djavax.net.ssl.keyStore=/opt/common/arkcase.ks -Djavax.net.ssl.trustStore=/opt/common/arkcase.ts"
        

        


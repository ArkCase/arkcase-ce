- name: create install folder
  become: yes
  become_user: pentaho
  file:
    path: "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}"
    state: directory  

- name: download FOIA analytical reports repository
  become: yes
  become_user: pentaho
  command: sshpass -e sftp -o StrictHostKeyChecking\=no -o UserKnownHostsFile\=/dev/null {{ sftp_arkcase_user }}@{{ sftp_service_base_url }}:{{ sftp_arkcase_folder }}/{{ item }}
  args:
    chdir: "{{ root_folder }}/install/pentaho"
    creates: "{{ root_folder }}/install/pentaho/{{ item }}"
  environment:
    SSHPASS: "{{ sftp_arkcase_password }}"
  loop:
    - foia-reports-dw-{{ foia_analytical_reports_version }}.zip

- name: unzip repository
  become: yes
  become_user: pentaho
  unarchive:
    remote_src: yes
    src: "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}.zip"
    dest: "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}"
    creates: "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/foia-dw1.kjb"

- name: get the encrypted password for the kettle job
  become: yes
  become_user: pentaho-pdi
  shell: "{{ root_folder }}/app/pentaho-pdi/data-integration/encr.sh -kettle '{{ rds_password | default(default_database_password) }}' | grep Encrypted"
  register: encr_password
  changed_when: false

- name: get the encrypted password for the cache clean jobs
  become: yes
  become_user: pentaho-pdi
  shell: "{{ root_folder }}/app/pentaho-pdi/data-integration/encr.sh -kettle '{{ arkcase_admin_password }}' | grep Encrypted"
  register: arkcase_admin_encr_password
  changed_when: false

- name: find project files
  become: yes
  become_user: pentaho
  find: 
    paths: 
      - "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}"
      - "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/dimensions"
      - "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/stages"
      - "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/reports"
      - "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/misc"
    file_type: file
    recurse: no
    excludes: 
      - "*~"
      - "*.zip"
  register: foia_dw_files

- name: update database configurations
  include_tasks: update_db_config.yml
  loop: "{{ foia_dw_files.files | map(attribute='path') | list }}"
  loop_control:
    loop_var: f

- name: update pentaho URLs to clear report cache
  become: yes
  become_user: pentaho
  lineinfile:
    backup: yes
    backrefs: yes
    path: "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/misc/FOIA_CDA_CLEAR_CACHE.ktr"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: "<nullif>http{{ ':' }}//localhost{{ ':' }}8080/pentaho/plugin/cda/api/clearCache</nullif>"
      line: "<nullif>https://{{ ansible_facts.fqdn }}:2002/pentaho/plugin/cda/api/clearCache</nullif>"
    - regexp: "<httpLogin>242.matthew.maines</httpLogin>"
      line: "  <httpLogin>{{ ldap_user_prefix }}arkcase-admin</httpLogin>"
    - regexp: "<httpPassword>Encrypted 2be98afc81ac2978aac22ab798bb3aac0</httpPassword>"
      line: "  <httpPassword>{{ arkcase_admin_encr_password.stdout }}</httpPassword>"

- name: update pentaho URLs to clear Mondrian cache
  become: yes
  become_user: pentaho
  lineinfile:
    backup: yes
    backrefs: yes
    path: "{{ root_folder }}/install/pentaho/foia-reports-dw-{{ foia_analytical_reports_version }}/misc/FOIA_MONDRIAN_CLEAR_CACHE.ktr"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: "<nullif>http{{ ':' }}//localhost{{ ':' }}8080/pentaho/api/system/refresh/mondrianSchemaCache</nullif>"
      line: "<nullif>https://{{ ansible_facts.fqdn }}:2002/pentaho/api/system/refresh/mondrianSchemaCache</nullif>"
    - regexp: "<httpLogin>242.matthew.maines</httpLogin>"
      line: "  <httpLogin>{{ ldap_user_prefix }}arkcase-admin</httpLogin>"
    - regexp: "<httpPassword>Encrypted 2be98afc81ac2978aac22ab798bb3aac0</httpPassword>"
      line: "  <httpPassword>{{ arkcase_admin_encr_password.stdout }}</httpPassword>"
      
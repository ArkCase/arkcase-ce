- name: Python LDAP package (RHEL 8)
  ansible.builtin.set_fact:
    pkg_python_ldap: python3-ldap
  when: ansible_distribution in ["RedHat","Rocky"] and ansible_distribution_major_version == "8"

- name: Python LDAP package (CentOS 7)
  ansible.builtin.set_fact:
    pkg_python_ldap: python-ldap
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: LDAP required packages
  become: true
  ansible.builtin.yum:
    state: installed
    name:
      - openldap-clients
      - "{{ pkg_python_ldap }}"

- name: Install cryptography
  become: true
  ansible.builtin.pip:
    executable: pip3
    name: cryptography
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: read LDAP server cert
  community.crypto.get_certificate:
    host: "{{ ldap_host }}"
    port: "{{ ldap_port }}"
  register: ldap_server_cert

- name: write LDAP server cert to trusted cert store
  become: yes
  copy:
    dest: /etc/pki/ca-trust/source/ldap_server_cert.pem
    content: "{{ ldap_server_cert.cert }}"
    backup: true
    force: yes
  register: ldap_server_cert_pem

- name: update trusted certs
  become: yes
  command: update-ca-trust
  when: ldap_server_cert_pem is changed

- name: Add arkcase ancestors
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop: "{{ ldap_ancestor_ous }}"
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Add arkcase organizational units
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop:
    - "{{ ldap_group_base }}"
    - "{{ ldap_user_base }}"
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Add portal organizational units
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop:
    - "{{ ldap_portal_group_no_base }},{{ ldap_base }}"
    - "{{ ldap_portal_user_no_base }},{{ ldap_base }}"
  when: foia_portal_context is defined
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Add core portal organizational units
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop:
    - "{{ ldap_core_portal_group_no_base }},{{ ldap_base }}"
    - "{{ ldap_core_portal_user_no_base }},{{ ldap_base }}"
  when: enable_microservices is defined and enable_microservices

- name: Add arkcase groups
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_group_base }}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_groups | flatten }}"
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Remove portal group from ArkCase OU if exists
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_group_no_base }},{{ ldap_base }}"
    state: absent
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_portal_groups | flatten }}"
  when: foia_portal_context is defined
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Add portal groups
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_portal_group_no_base }},{{ ldap_base }}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_portal_groups | flatten }}"
  when: foia_portal_context is defined
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Add Core portal groups
  become: true
  community.general.ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: false
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_core_portal_group_no_base }},{{ ldap_base }}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_core_portal_groups | flatten }}"
  when: enable_microservices is defined and enable_microservices

- name: Add users
  ansible.builtin.include_tasks: add-user.yml
  loop: "{{ ldap_users }}"
  loop_control:
    loop_var: u
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Make sure Samba passwords never expire
  become: true
  ansible.builtin.command: '{{ root_folder }}/app/samba/bin/samba-tool domain passwordsettings set --max-pwd-age=0'
  when: ldap_type == "samba" and internal_host == ldap_host


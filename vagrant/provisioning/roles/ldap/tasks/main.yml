- name: python LDAP package (RHEL 8)
  set_fact:
    pkg_python_ldap: python3-ldap
  when: ansible_distribution in ["RedHat","Rocky"] and ansible_distribution_major_version == "8"

- name: python LDAP package (CentOS 7)
  set_fact:
    pkg_python_ldap: python-ldap
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- name: LDAP required packages
  become: yes
  yum:
    state: installed
    name: 
      - openldap-clients
      - "{{ pkg_python_ldap }}"

- name: install cryptography
  become: yes
  pip:
    executable: pip3
    name: cryptography
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: list certs in the key store
  become: yes
  command: keytool -v -list -keystore "{{ java_trust_store }}" -storepass "{{ java_trust_store_pass }}"
  register: cert_list
  changed_when: false

- name: import the ldap cert to the ArkCase trust store
  become: yes
  java_cert:
    cert_alias: "arkcase_ldap_cert"
    cert_url: "{{ ldap_host }}"
    cert_port: "{{ ldap_port|int }}"
    keystore_path: "{{ java_trust_store }}"
    keystore_pass: "{{ java_trust_store_pass }}"
    state: present
  when: "'arkcase_ldap_cert' not in cert_list.stdout"

- name: add arkcase ancestors
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop: "{{ ldap_ancestor_ous }}"
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add arkcase organizational units
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop:
    - "{{ ldap_group_base }}"
    - "{{ ldap_user_base }}"
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add portal organizational units
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop:
    - "{{ ldap_portal_group_no_base }},{{ ldap_base }}"
    - "{{ ldap_portal_user_no_base }},{{ ldap_base }}"
  when: foia_portal_context is defined
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add core portal organizational units
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "{{ item }}"
    objectClass:
      - organizationalUnit
      - top
    attributes:
      description: "{{ item }}"
  loop:
    - "{{ ldap_core_portal_group_no_base }},{{ ldap_base }}"
    - "{{ ldap_core_portal_user_no_base }},{{ ldap_base }}"
  when: enable_microservices is defined and enable_microservices
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add arkcase groups
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ldap_group_base}}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_groups|flatten }}"
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: remove portal group from ArkCase OU if exists
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_group_no_base }},{{ ldap_base }}"
    state: absent
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_portal_groups|flatten }}"
  when: foia_portal_context is defined
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add portal groups
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_portal_group_no_base }},{{ ldap_base }}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_portal_groups|flatten }}"  
  when: foia_portal_context is defined
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add Core portal groups
  ldap_entry:
    server_uri: "{{ ldap_url }}"
    validate_certs: no
    bind_dn: "{{ ldap_bind_user }}"
    bind_pw: "{{ ldap_bind_password }}"
    dn: "CN={{ item.name }},{{ ldap_core_portal_group_no_base }},{{ ldap_base }}"
    objectClass:
      - group
      - top
    attributes:
      description: "{{ item.description }}"
      samAccountName: "{{ item.name }}"
      cn: "{{ item.name }}"
  loop: "{{ ldap_core_portal_groups|flatten }}"
  when: enable_microservices is defined and enable_microservices
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: add users
  include_tasks: add-user.yml
  loop: "{{ ldap_users }}"    
  loop_control:
    loop_var: u
  vars:
    ansible_python_interpreter: "{{ ansible_python3 | default('/usr/bin/python2') }}"

- name: Make sure Samba passwords never expire
  become: yes
  command: '{{ root_folder }}/app/samba/bin/samba-tool domain passwordsettings set --max-pwd-age=0'
  when: ldap_type == "samba"

